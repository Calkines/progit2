[[_marcações_Git]]
=== Marcações

(((tags)))
Como a maioria dos SCVs, o Git tem a habilidade de marcar pontos específicos na história como sendo 
pontos importantes.
Tipicamente pessoas usam essa funcionalidade para marcar pontos de lançamento (v1.0, e assim por diante).
Nesta seção, você vai aprender como listar as marcações disponíveis, como criar novas marcações, e quais são os diferentes tipos de marcação.

==== Listando Suas Marcações

Listar as marcações disponíveis no Git é fácil.
Só precisamos digitar `git tag`:(((comandos git,tag)))

[source,console]
----
$ git tag
v0.1
v1.3
----

Esse comando lista as marcações em ordem alfabética; a ordem em que elas aparecem não tem importância real.

Você também pode procurar por marcações com um padrão particular.
O repositório de código Git, no momento, contém mais de 500 marcações.
Se você está interessado em olhar apenas para séries do tipo 1.8.5, você pode executar isto:

[source,console]
----
$ git tag -l "v1.8.5*"
v1.8.5
v1.8.5-rc0
v1.8.5-rc1
v1.8.5-rc2
v1.8.5-rc3
v1.8.5.1
v1.8.5.2
v1.8.5.3
v1.8.5.4
v1.8.5.5
----

==== Criando Marcações

O Git usa dois tipos princiapais de marcações: leves e anotadas.

A marcação leve é muito parecida com uma ramificação que não muda - é apenas um ponteiro para uma submissão específica.

Marcações anotadas, contudo, são armazenadas como objetos completos no banco de dados do Git.
Eles passam por verificação de checksum; possuem o nome do marcante, e-mail, e data; possuem uma mensagem de marcação; e podem ser assinadas e verificadas com o Guarda de Privacidades GNU (GPG).
É geralmente recomendado que você crie marcações anotadas, assim você pode ter todas essas informações; mas se você quer uma marcação temporária ou por alguma razão não quer manter as demais informações, marcações leves estão disponíveis para isso.

[[_marcações_anotadas]]
==== Marcações Anotadas

(((maracações, anotadas)))
Criar um marcação anotada no Git é simples.
A maneira mais fácil é especificar `-a` quando você executa o comando `tag`:(((comandos git, tag)))

[source,console]
----
$ git tag -a v1.4 -m "my version 1.4"
$ git tag
v0.1
v1.3
v1.4
----

O `-m` especifica a mensagem de marcação, que é armazenada com a marcação. Caso você não especifique a mensagem para uma marcação anotada, o Git abre seu editor padrão para que você possa inseri-la através dele.

Você pode ver os dados da marcação junto com a submissão, que foi marcada, usando o comando `git show`:

[source,console]
----
$ git show v1.4
tag v1.4
Tagger: Ben Straub <ben@straub.cc>
Date:   Sat May 3 20:19:12 2014 -0700

my version 1.4

commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

Isso mostra as informações da marcação, a data que a submissão foi marcada, e a mensagem de anotação antes de mostrar as informações de submissão.

==== Marcações Leves

(((marcações, leves)))
Outra maneira de marcar submissões é com uma marcação leve.
Isso é basicamente um checksum de uma submissão armazenado em um arquivo - nenhuma outra informação é mantida.
Para criar uma marcação leve, não forneca nenhuma opção como `-a`, `-s` ou `-m`:

[source,console]
----
$ git tag v1.4-lw
$ git tag
v0.1
v1.3
v1.4
v1.4-lw
v1.5
----

Agora, você pode executar o `git show` junto com o nome da marcação, assim você não vê nenhuma informação de marcação extra.(((comandos git, show)))
O comando mostra somente a submissão:

[source,console]
----
$ git show v1.4-lw
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number
----

==== Marcando Depois

Você também criar marcações de submissões após ter submetido.
Imagine que sua história de submissões pareca com isto:

[source,console]
----
$ git log --pretty=oneline
15027957951b64cf874c3557a0f3547bd83b3ff6 Merge branch 'experiment'
a6b4c97498bd301d84096da251c98a07c7723e65 beginning write support
0d52aaab4479697da7686c15f77a3d64d9165190 one more thing
6d52a271eda8725415634dd79daabbc4d9b6008e Merge branch 'experiment'
0b7434d86859cc7b8c3d5e1dddfed66ff742fcbc added a commit function
4682c3261057305bdd616e23b64b0857d832627b added a todo file
166ae0c4d3f420721acbb115cc33848dfcc2121a started write support
9fceb02d0ae598e95dc970b74767f19372d61af8 updated rakefile
964f16d36dfccde844893cac5b347e7b3d44abbc commit the todo
8a5cbc430f1a9c3d00faaeffd07798508422908a updated readme
----

Agora, suponha que você esqueceu-se de marcar o projeto na v1.2, o qual foi submetido com a mensagem ``updated rakefile``. 
Na verdade você pode adicionar a marcação depois.
Para marcar aquela submissão, você especifica o checksum da submissão (ou parte dele) no final do comando:

[source,console]
----
$ git tag -a v1.2 9fceb02
----

Você pode ver que você marcou a submissão:(((comandos git, tag)))

[source,console]
----
$ git tag
v0.1
v1.2
v1.3
v1.4
v1.4-lw
v1.5

$ git show v1.2
tag v1.2
Tagger: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Feb 9 15:32:16 2009 -0800

version 1.2
commit 9fceb02d0ae598e95dc970b74767f19372d61af8
Author: Magnus Chacon <mchacon@gee-mail.com>
Date:   Sun Apr 27 20:43:35 2008 -0700

    updated rakefile
...
----

[[_sharing_tags]]
==== Compartilhando Marcações

Por padrão, o comando `git push` não transfere marcações para servidores remotos.(((comandos git, push)))
Você vai ter que explicitamente enviar as marcações para um servidor compartilhado, após criá-las.
Esse processo é como compartilhar ramificações remotas - você pode executar `git push orgin [nomeDaMarcacao]`.

[source,console]
----
$ git push origin v1.5
Counting objects: 14, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (12/12), done.
Writing objects: 100% (14/14), 2.05 KiB | 0 bytes/s, done.
Total 14 (delta 3), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.5 -> v1.5
----

Se você tiver várias marcações e quiser enviar todas ao mesmo tempo, você pode usar a opçao `--tag` no comando `git push`.
Isso vai transferir todas suas marcações para o servidor remoto, que ainda não possui tais marcações.

[source,console]
----
$ git push origin --tags
Counting objects: 1, done.
Writing objects: 100% (1/1), 160 bytes | 0 bytes/s, done.
Total 1 (delta 0), reused 0 (delta 0)
To git@github.com:schacon/simplegit.git
 * [new tag]         v1.4 -> v1.4
 * [new tag]         v1.4-lw -> v1.4-lw
----

Agora, quando alguem clonar ou receber de seu repositório, eles vão receber todas suas marcações também.

==== Conferindo Marcações

Você não pode realmente conferir marcações no Git, já que elas não podem ser movidas. Caso você queira colocar uma versão do seu repositório no seu diretório de trabalho, que parece uma marcação especifica, você pode criar uma nova ramificação com a tag específica `git checkout -b [nomeDaRamificação] [nomeDaMarcação]`:

[source,console]
----
$ git checkout -b version2 v2.0.0
Switched to a new branch 'version2'
----

É claro se você fizer isso e fizer uma submissão, sua ramificação `version2` será um pouco diferente da sua marcação `v2.0.0` já que esta foi atualizada com as novas modificações, então cuidado.