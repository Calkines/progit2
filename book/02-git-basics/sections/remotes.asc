[[_repositorios_remotos]]
=== Trabalhando com Repositórios Remotos

Para estar apto a colaborar em qualquer repositório Git, você precisa saber como gerenciar seus repositórios remotos.
Repositórios remotos são versões de seus projetos que são hospedadas na Internet ou em algum lugar da rede.
Você pode ter muitos deles, cada um deles pode ser apenas leitura ou permitir leitura e escrita.
Colaborar com outros envolve o gerenciamento desses repositórios remotos e enviar ou receber dados para eles, quando você precisa compartilhar um trabalho.
Gerenciar repositórios remotos incluí saber como adicionar um repositório remoto, remover repositórios que não forem válidos, gerenciar várias ramificações e defini-las como rastreáveis ou não, entre outas funções.
Nesta seção, nós cobriremos algumas dessas habilidades de gerenciamento remoto.

==== Mostrando seus Repositórios Remotos

Para ver quais servidores remotos você tem configurado, você pode executar o comando `git remote`. (((comandos git, remote)))
Isso lista os nomes simplificados de cada controlador remoto que você tem especificado.
Caso você tenha clonado seu repositório, você precisa, no mínimo, ver a origem - que é o nome padrão que o Git deu ao servidor do qual você clonou:

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

Você também pode especificar a opção `-v`, que lhe mostra as URLs que o Git armazenou para o nome simplificado e que será usada quando ler ou escrever no repositório remoto.

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

Caso você tenha mais de um repositório remoto, o comando lista todos eles.
<<<<<<< HEAD
Por exemplo, um repositório com múltiplos repositórios remotos para trabalhar com diversos colaboradores, pode parecer algo como isto:
=======
Por exemplo, um repositório com vários repositórios múltiplos para trabalhar com diversos colaboradores pode parecer algo como isto:
>>>>>>> 5f4ddeaabf9cbee4f4d6a7cb7372c12b6cebc757

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

Isso significa que nós podemos receber contribuições de qualquer um desses usuários de forma bem fácil.
Adicionalmente, nós podemos ter permissões para enviar para um ou mais desses repositórios, embora essa informação não esteja visível aqui.

Perceba que esses repositórios remotos usam uma variedade de protocolos; nós vamos cobrir mais sobre eles em <<git_on_the_server, o Git no servidor>>.

==== Adicionando Repositórios Remotos

Nós mencionamos e demos algumas demonstrações de como o comando `clone` implicitamente adiciona o repositório `origin` para você. Veja aqui como adicionar um novo repositório remoto explicitamente. (((comandos git, remote)))
Para adicionar um novo repositório remoto Git como um nome simplificado que você pode referenciar facilmente, execute `git remote add <nome simplificado> <url>`:

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

Agora você pode usar o texto `pb` na linha de comando em vez de toda URL.
Por exemplo, se você quiser buscar todas informações que o Paul tem, mas que você não tem ainda em seu repositório, você pode executar `git fetch pb`:

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

A ramificação mestre do Paul é agora acessível localmente como `pb/master` - você pode fundi-la em alguma de suas ramificações, ou você pode comparar com um ramificação local, caso queira inspecioná-la.
(Nós vamos falar mais sobre o que são ramificações e como você pode usá-las com muito mais detalhes em <<git_branching, ramificações no Git>>.)

[[_recebendo_e_enviando]]
==== Recebendo e Enviando de Seus Repositórios Remotos

Como você já viu, para pegar dados de seus projetos remotos, você pode executar:(((comandos git, fetch)))

[source,console]
----
$ git fetch [remote-name]
----

O comando vai até o projeto remoto e recebe toda informação daquele projeto remoto que você ainda não tem.
Depois que você faz isso, você deve ter referências para todas ramificações daquele repositório remoto, para as quais você pode fundir ou inspecioná-las quando desejar.

Se você clonar um repositório, o comando automaticamente adiciona aquele repositório remoto sobre o nome ``origin``.
Então, o comando `git fetch origin` busca qualquer novo trabalho que foi enviado para o servidor desde que você o clonou (ou buscou pela última vez).
É importante perceber que o comando `git fetch` apenas baixa os dados para seu repositório local - ele não os funde automaticamente com qualquer trabalho seu ou modifica qualquer coisa na qual você esteja trabalhando.
Você precisa fundir os dados manualmente com seu trabalho quando você estiver pronto para isso. 

Se sua ramificação está configurada para rastrear uma ramificação remota (veja a próxima seção e <<git_branching,ramificação do Git>> para mais informações), você pode usar o comando `git pull` para automaticamente buscar e fundir de forma automatica aquela ramificação remota em seu ramificação atual. (((comandos git, pull)))
Esse pode ser o fluxo de trabalho mais fácil ou confortável para você; e por padrão, o comando `git clone` automaticamente configura sua ramificação mestre local para rastrear a ramificação mestre remota (ou seja lá como a ramificação padrão seja chaamda) no servidor do qual você clonou.
Executar `git pull` geralmente busca os dados de um servidor que você originalmente clonou e automaticamente tenta fundi-los no seu código, o qual você está atualmente trabalhando.

[[_envio_para_remoto]]
==== Enviando para Local Remoto

Quando você tem seu projeto em um ponto no qual você deseja compartilhar, você precisa enviá-lo para frente.
O comando para fazer isso é simplesmente: `git push [remote-name] [branch-name]`.(((git commands, push)))
Se você quiser enviar sua ramificação mestre para o servidor `origin` (novamente, clonar geralmente configura esses dois nomes para você de forma automática), assim você pode executar este comando para enviar qualquer submissão que você tenha feito para o servidor:

[source,console]
----
$ git push origin master
----

Esse comando funciona apenas se você clonou de um servidor que você tenha permissões de escrita e se ninguém enviou no mesmo tempo.
Se você e outras pessoas clonaram ao mesmo tempo e eles enviam para o servidor e você também, seu envio será rejeitado corretamente.
Você terá que buscar (fetch) o trabalho deles primeiro e incorporá-lo ao seu, antes de ser liberado para enviar.
Veja <<_git_branching,Ramificações no Git>> para informações mais detalhadas sobre como enviar para servidores remotos.

[[_inspecting_remote]]
==== Inspecionando um Servidor Remoto

Se você quer ver mais informação sobre um servidor remoto particular, você pode usar o comando `git remote show [remote-name]`.(((comandos git, remote)))
Se você executar esse comando com um atalho particular, como `origin`, você vai ver algo como isto:

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

Isto lista a URL para o servidor remoto, assim como as informações de rastreamento da ramificação.
O comando de forma prestativa nos diz que se você estiver na ramificação master e se você rodar o `git pull`, isso vai fundir automaticamente sua ramificação mestre (branch master) no servidor remoto e depois disso buscar todas referências remotas.
Isso também lista todas referências remotas que foram baixadas.

Isto é um simples exemplo que você provavelmente encontrará, quando você estiver usando o Git de forma mais intensa, contudo, você pode ver muito mais informações do `git remote show`:

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

Esse comando mostra qual ramificação é automaticamente enviada quando você executa o `git push` em certas ramificações.
Ele também lhe mostra quais ramificações remotas você ainda não tem, quais você tem mas que foram removidas do servidor, e múltiplas ramificações locais que estão aptas para serem fundidas automaticamente com suas ramificações remotas rastreadas, quando você executa o `git pull`.

==== Removendo e Renomeando Servidores Remotos

Você pode executar `git remote rename` para mudar o nome de atalho para um servidor remoto.(((comandos git, remote)))
Por hora, se você quer renomear `pb` para `paul`, você pode fazê-lo com `git remote rename`:

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

Vale a pena mencionar que isso muda todos os nomes de suas ramificações rastreadas, também.
O que geralmente costumava ser referênciado como `pb/master` está agora sob `paul/master`.

Se você quer remover um servidor remoto por alguma razão - você mudou o servidor ou não está usando local de distribuíção (mirror), ou talvez um contribuidor não esteja contribuíndo mais - você pode usar tanto `git remote remove` quanto `git remote rm`:

[source,console]
----
$ git remote remove paul
$ git remote
origin
----
