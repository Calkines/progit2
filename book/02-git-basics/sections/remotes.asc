[[_repositorios_remotos]]
=== Trabalhando com Repositórios Remotos

Para estar apto a colaborar em qualquer repositório Git, você precisa saber como gerenciar seus repositórios remotos.
Repositórios remotos são versões de seus projetos que são hospedadas na Internet ou em algum lugar da rede.
Você pode ser muitos deles, cada deles pode ser apenas leitura ou permitir leitura e escrita.
Colaborar com outros envolve o gerenciamento desses repositórios remotos e enviar ou receber dados para eles, quando você precisa compartilhar um trabalho.
Gerenciar repositórios remotos incluí saber como adicionar um repositório remoto, remover repositórios que não forem válidos, gerenciar várias ramificações e defini-las como rastreáveis ou não, entre outas funções.
Nesta seção, nós cobriremos algumas dessas habilidades de gerenciamento remoto.

==== Mostrando seus Repositórios Remotos

Para ver quais servidores remotos você tem configurado, você pode executar o comando `git remote`. (((comandos git, remote)))
Isso lista os nomes simplificados de cada controlador remoto que você tem especificado.
Caso você tenha clonado seu repositório, você precisa, no mínimo, ver a origem - que é o nome padrão que o Git deu ao servidor do qual você clonou:

[source,console]
----
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
----

Você também pode especificar a opção `-v`, que lhe mostra as URLs que o Git armazenou para a nome simplificado e que será usada quando ler ou escrever no repositório remoto.

[source,console]
----
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
----

Caso você tenha mais de um repositório remoto, o comando lista todos eles.
Por exemplo, um repositório com múltiplos repositórios múltiplos para trabalhar com diversos colaboradores pode parecer algo como isto:

[source,console]
----
$ cd grit
$ git remote -v
bakkdoor  https://github.com/bakkdoor/grit (fetch)
bakkdoor  https://github.com/bakkdoor/grit (push)
cho45     https://github.com/cho45/grit (fetch)
cho45     https://github.com/cho45/grit (push)
defunkt   https://github.com/defunkt/grit (fetch)
defunkt   https://github.com/defunkt/grit (push)
koke      git://github.com/koke/grit.git (fetch)
koke      git://github.com/koke/grit.git (push)
origin    git@github.com:mojombo/grit.git (fetch)
origin    git@github.com:mojombo/grit.git (push)
----

Isso significa que nós podemos receber contribuições de qualquer um desses usuários de forma bem fácil.
Adicinalmente, nós podemos ter permissões para enviar para um ou mais desses repositórios, embora essa informação não esteja visível aqui.

Perceba que esses repositórios remotos usam uma variedade de protocolos; nós vamos cobrir mais sobre eles em <<git_on_the_server, o Git no servidor>>.

==== Adicionando Repositórios Remotos

Nós mencionamos e demos algumas demonstrações de como o comando `clone` implicitamente adicona o repositório `origin` para você. Veja aqui como adicionar um novo repositório remoto explicitamente. (((comandos git, remote)))
Para adiconar um novo repositório remoto Git como um nome simplificado que você pode referenciar facilmente, execute `git remote add <nome simplificado> <url>`:

[source,console]
----
$ git remote
origin
$ git remote add pb https://github.com/paulboone/ticgit
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
pb	https://github.com/paulboone/ticgit (fetch)
pb	https://github.com/paulboone/ticgit (push)
----

Agora você pode usar o texto `pb` na linha de comando em vez de toda URL.
Por exemplo, se você quiser buscar todas informações que o Paul tem, mas que você não tem ainda em seu repositório, você pode executar `git fetch pb`:

[source,console]
----
$ git fetch pb
remote: Counting objects: 43, done.
remote: Compressing objects: 100% (36/36), done.
remote: Total 43 (delta 10), reused 31 (delta 5)
Unpacking objects: 100% (43/43), done.
From https://github.com/paulboone/ticgit
 * [new branch]      master     -> pb/master
 * [new branch]      ticgit     -> pb/ticgit
----

A ramificação mestre do Paul é agora acessível localmente como `pb/master` - você pode fundi-la em alguma de suas ramificações, ou você pode comparar com um ramificação local, caso queira inspecioná-la.
(Nós vamos falar mais sobre o que são ramificações e como você pode usá-las com muito mais detalhes em <<git_branching, ramificações no Git>>.)

[[_recebendo_e_enviando]]
==== Recebendo e Enviando de Seus Repositórios Remotos

Como você já viu, para pegar dados de seus projetos remotos, você pode executar:(((comandos git, fetch)))

[source,console]
----
$ git fetch [remote-name]
----

O comando vai até o projeto remoto e recebe toda informação daquele projeto remoto que você ainda não tem.
Depois que você faz isso, você deve ter renferências para todas ramificações daquele repositório remoto, para as quais você pode fundir ou inspecioná-las quando desejar.

Se você clonar um repositório, o comando automaticamente adicona aquele repositório remoto sobre o nome ``origin``.
Então, o comando `git fetch origin` busca qualquer novo trabalho que foi enviado para o servidor desde que você o clonou (ou buscou pela última vez).
É importante perceber que o comando `git fetch` apenas baixa os dados para seu repositório local - ele não os funde automaticamente com qualquer trabalho seu ou modifica qualquer coisa na qual você esteja trabalhando.
Você precisa fundir os dados manualmente com seu trabalho quando você estiver pronto para isso. 

Se sua ramificação está configurada para rastrear uma ramificação remota (veja a próxima seção e <<git_branching,ramificação do Git>> para mais informações), você pode usar o comando `git pull` para automaticamente buscar e fundir de forma automatica aquela ramificação remota em seu ramificação atual. (((comandos git, pull)))
Esse pode ser o fluxo de trabalho mais fácil ou confortável para você; e por padrão, o comando `git clone` automaticamente configura sua ramificação mestre local para rastrear a ramificação mestre remota (ou seja lá como a ramificação padrão seja chaamda) no servidor do qual você clonou.


This may be an easier or more comfortable workflow for you; and by default, the `git clone` command automatically sets up your local master branch to track the remote master branch (or whatever the default branch is called) on the server you cloned from.
Running `git pull` generally fetches data from the server you originally cloned from and automatically tries to merge it into the code you're currently working on.

[[_pushing_remotes]]
==== Pushing to Your Remotes

When you have your project at a point that you want to share, you have to push it upstream.
The command for this is simple: `git push [remote-name] [branch-name]`.(((git commands, push)))
If you want to push your master branch to your `origin` server (again, cloning generally sets up both of those names for you automatically), then you can run this to push any commits you've done back up to the server:

[source,console]
----
$ git push origin master
----

This command works only if you cloned from a server to which you have write access and if nobody has pushed in the meantime.
If you and someone else clone at the same time and they push upstream and then you push upstream, your push will rightly be rejected.
You'll have to fetch their work first and incorporate it into yours before you'll be allowed to push.
See <<_git_branching>> for more detailed information on how to push to remote servers.

[[_inspecting_remote]]
==== Inspecting a Remote

If you want to see more information about a particular remote, you can use the `git remote show [remote-name]` command.(((git commands, remote)))
If you run this command with a particular shortname, such as `origin`, you get something like this:

[source,console]
----
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
----

It lists the URL for the remote repository as well as the tracking branch information.
The command helpfully tells you that if you're on the master branch and you run `git pull`, it will automatically merge in the master branch on the remote after it fetches all the remote references.
It also lists all the remote references it has pulled down.

That is a simple example you're likely to encounter.
When you're using Git more heavily, however, you may see much more information from `git remote show`:

[source,console]
----
$ git remote show origin
* remote origin
  URL: https://github.com/my-org/complex-project
  Fetch URL: https://github.com/my-org/complex-project
  Push  URL: https://github.com/my-org/complex-project
  HEAD branch: master
  Remote branches:
    master                           tracked
    dev-branch                       tracked
    markdown-strip                   tracked
    issue-43                         new (next fetch will store in remotes/origin)
    issue-45                         new (next fetch will store in remotes/origin)
    refs/remotes/origin/issue-11     stale (use 'git remote prune' to remove)
  Local branches configured for 'git pull':
    dev-branch merges with remote dev-branch
    master     merges with remote master
  Local refs configured for 'git push':
    dev-branch                     pushes to dev-branch                     (up to date)
    markdown-strip                 pushes to markdown-strip                 (up to date)
    master                         pushes to master                         (up to date)
----

This command shows which branch is automatically pushed to when you run `git push` while on certain branches.
It also shows you which remote branches on the server you don't yet have, which remote branches you have that have been removed from the server, and multiple local branches that are able to merge automatically with their remote-tracking branch when you run `git pull`.

==== Removing and Renaming Remotes

You can run `git remote rename` to change a remote's shortname.(((git commands, remote)))
For instance, if you want to rename `pb` to `paul`, you can do so with `git remote rename`:

[source,console]
----
$ git remote rename pb paul
$ git remote
origin
paul
----

It's worth mentioning that this changes all your remote-tracking branch names, too.
What used to be referenced at `pb/master` is now at `paul/master`.

If you want to remove a remote for some reason – you've moved the server or are no longer using a particular mirror, or perhaps a contributor isn't contributing anymore – you can either use `git remote remove` or `git remote rm`:

[source,console]
----
$ git remote remove paul
$ git remote
origin
----
