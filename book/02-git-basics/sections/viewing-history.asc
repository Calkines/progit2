[[_visualizar_histórico]]
=== Vendo o Histórico de Submissões

Depois de você ter criado várias submissões, ou caso você tenha clonado um repositório com um histórico de submissões pré-existente, você provavelmente vai querer ver o passado para entender o que aconteceu.
A ferramenta mais básica e poderosa para fazer isso é o comando `git log`.

Estes exemplos usam um projeto muito simples chamado ``simplegit``.
Para pegar o projeto, execute

[source,console]
----
$ git clone https://github.com/schacon/simplegit-progit
----

Quando você executa `git log` neste projeto, você deve ver a saída da seguinte maneira:(((comandos git, log)))

[source,console]
----
$ git log
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit
----

Por padrão, sem argumentos, o `git log` lista as submissões feitas no repositório na order cronológica inversa - isto é, as submissões mais recentes são mostradas primeiro.
Como você pode ver, este comando mostra cada submissão com seu respectivo SHA-1 checksum, o nome do autor e o e-mail, a data da escrita, e a mensagem de submissão.

Um grande número e variedade de opções para o comando `git log` estão disponíveis para mostrar a você exatamente o que você está procurando.
Aqui, nós vamos mostrar a você os comandos mais populares.

Uma das opões mais úteis é a `-p`, que mostra a diferença introduzida pela submissão.
Você também pode usar `-2`, que limita a saída para apenas as útlimas duas entradas:

[source,console]
----
$ git log -p -2
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

diff --git a/Rakefile b/Rakefile
index a874b73..8f94139 100644
--- a/Rakefile
+++ b/Rakefile
@@ -5,7 +5,7 @@ require 'rake/gempackagetask'
 spec = Gem::Specification.new do |s|
     s.platform  =   Gem::Platform::RUBY
     s.name      =   "simplegit"
-    s.version   =   "0.1.0"
+    s.version   =   "0.1.1"
     s.author    =   "Scott Chacon"
     s.email     =   "schacon@gee-mail.com"
     s.summary   =   "A simple gem for using Git in Ruby code."

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

diff --git a/lib/simplegit.rb b/lib/simplegit.rb
index a0a60ae..47c6340 100644
--- a/lib/simplegit.rb
+++ b/lib/simplegit.rb
@@ -18,8 +18,3 @@ class SimpleGit
     end

 end
-
-if $0 == __FILE__
-  git = SimpleGit.new
-  puts git.show
-end
\ No newline at end of file
----

Esta opção mostra a mesma informação, mas acrescida da diferença após cada submissão.
Isto é muito útil para revisores de código ou para navegar rapidamente entre o que aconteceu durante uma série de submissões que o colaborador tenha adicionado.
Você também pode usar uma série de oções de resumo com o `git log`.
Por exemplo, se você quiser ver algum estado abreviado para cada submissão, você usa a opção `--stat`:

[source,console]
----
$ git log --stat
commit ca82a6dff817ec66f44342007202690a93763949
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Mon Mar 17 21:52:11 2008 -0700

    changed the version number

 Rakefile | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

commit 085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 16:40:33 2008 -0700

    removed unnecessary test

 lib/simplegit.rb | 5 -----
 1 file changed, 5 deletions(-)

commit a11bef06a3f659402fe7563abf99ad00de2209e6
Author: Scott Chacon <schacon@gee-mail.com>
Date:   Sat Mar 15 10:31:28 2008 -0700

    first commit

 README           |  6 ++++++
 Rakefile         | 23 +++++++++++++++++++++++
 lib/simplegit.rb | 25 +++++++++++++++++++++++++
 3 files changed, 54 insertions(+)
----

Como você pode ver, a opção `--stat` imprime, abaixo de cada registro de submissão, a lista dos arquivos modificados, quantos arquivos foram alterados, e quantas linhas nesses arquivos foram adicionadas ou removidas.
Essa opção também mostra um resumo das informações no final.

Outra opção bem útil é `--pretty`.
Essa opção altera o log de saída para formatos diferente do padrão.
Alguns pré-construídos estão disponíveis para você usar.
A opção `oneline` imprime cada submissão em uma única linha, o que é útil quando você está olhando muitas submissões.
Além destes, as opções `short`,`full`, e `fuller` mostram a saída com mais ou menos o mesmo formato, apenas com pouca ou mais informações respectivamente:

[source,console]
----
$ git log --pretty=oneline
ca82a6dff817ec66f44342007202690a93763949 changed the version number
085bb3bcb608e1e8451d4b2432f8ecbe6306e7e7 removed unnecessary test
a11bef06a3f659402fe7563abf99ad00de2209e6 first commit
----

A opção mais interessante é `format`, que permite a você especificar seu próprio formato de saída de log.
Isso é especialmente útil quando você está gerando saída para análise de máquina - porque você especifica o formato explicitamente, você sabe que isso não muda com atualizações do Git: (((formatando log)))

Isto é especialmente útil quando você está gerando saída para análise de máquina - porque você especifica o formato explicitamente, assim você sabe que isso não vai mudar com os updates do Git: (((formatação de log)))

[source,console]
----
$ git log --pretty=format:"%h - %an, %ar : %s"
ca82a6d - Scott Chacon, 6 years ago : changed the version number
085bb3b - Scott Chacon, 6 years ago : removed unnecessary test
a11bef0 - Scott Chacon, 6 years ago : first commit
----

<<pretty_format>> lista alguns das mais úteis opções que o `format` aceita.

[[pretty_format]]
.Opções úteis para `git log --pretty=format`
[cols="1,4",options="header"]
|================================
| Opção    | Descrição da Saída
| `%H`     | Hash da submissão
| `%h`     | Hash abreviado da submissão
| `%T`     | Árvore de hash
| `%t`     | Árvore de hash abreviada
| `%P`     | Hashes dos pais
| `%p`     | Hashes dos pais abreviados
| `%an`    | Nome do autor
| `%ae`    | E-mail do autor
| `%ad`    | Data de autoria (o formato respeita --date=option)
| `%ar`    | Data de autoria, relativa
| `%cn`    | Nome de quem submeteu
| `%ce`    | E-mail de quem submeteu
| `%cd`    | Data de submissão
| `%cr`    | Data de submissão, relativa
| `%s`     | Assunto
|================================

Você pode estar se perguntando quais as diferenças entre _autor_ e _pessoa que submeteu_.
O autor é a pessoa que originalmente escreveu o trabalho, enquanto que a pessoa que submeteu é a última pessoa que enviou o trabalho.
Então, se você enviar um patch para um projeto e um ou muitos grupo de membros enviar um patch, ambos vão receber o crédito - você como autor, e o membro principal como committer.

Nós discutiremos um pouco melhor essa distinção em <<_git_distribuido>>.

As opções `oneline` e `format` são particularmente úteis com outra opção de `log` chamada `--graph`.
Essa opção adiciona um pequeno gráfico ASCII bem legal, mostrando sua ramificação e histórico de fusões.

[source,console]
----
$ git log --pretty=format:"%h %s" --graph
* 2d3acf9 ignore errors from SIGCHLD on trap
*  5e3ee11 Merge branch 'master' of git://github.com/dustin/grit
|\
| * 420eac9 Added a method for getting the current branch.
* | 30e367c timeout code and tests
* | 5a09431 add timeout protection to grit
* | e1193f8 support for heads with slashes in them
|/
* d6016bc require time for xmlschema
*  11d191e Merge branch 'defunkt' into local
----

Esse tipo de saída ficará mais interessante conforme fomos avançando através de ramificações e fusões no próximo capítulo.

Essas são apenas algumas simples opções de formatação de saída para o comando `git log` - existem muitos outros.
<<opcoes_log,Opções de Log>> lista as opções que cobrimos até o momento, assim como outras opções comuns de formatação que podem ser úteis, junto com como elas mudam a saída do comando de log.

[[opcoes_log]]
.Opções comuns para o `git log`
[cols="1,4", options="header"]
|===============================
|Opção              | Descrição
| `-p`              | Mostra o trecho incluído com cada submissão.
| `--stat`          | Mostra estatísticas para arquivos modificados em cada submissão.
| `--shortstat`     | Mostra apenas a linha de alterado/inserções/remoções do commando --stat.
| `--name-only`     | Mostra a lista de arquivos modificados após as informações de submissões
| `--name-status`   | Mostra a lsita de arquivos afetados e as informações de alteração/inserção/remoções.
| `--abbrev-commit` | Mosta apenas os primeiros caracteres do SHA-1 checksum, em vez de todos 40.
| `--relative-date` | Mostra a data em um formato relativo (por exemplo, ``2 semanas atrás``) em vez de usar o formato completo de data.
| `--graph`         | Mostra um gráfico ASCII da ramificação e o histórico de submissões ao lado da saída de log.
| `--pretty`        | Mostra as submissões de uma forma alternativa. Essa opção aceita os argumentos: oneline, short, full, fuller e format (no qual você especifica seu próprio formato).
|===============================

===== Limitando a Saída de Log

Além de opções de formato para saída, o `git log` tem um número de opções úteis de limites - que são opções que lhe permitem mostrar apenas um subconjunto de submissões.
Você já viu uma dessas opções - a opção `-2`, que mostra apenas os últimos dois registros.
De fato, você pode usar `-<n>`, no qual `n` é um inteiro que mostra as últimas `n` submissões.
Na verdade, é improvável que você use isso com frequência, porque o Git por padrão canaliza toda saída através de um pager, então você vai ver apenas uma página de log de saída por vez.

Contudo, as opções de limitação de tempo como `--since` e `--until` são muito úteis.
Por exemplo, esse comando mostra a lsita de submissões feitas nas últimas duas semanas:

[source,console]
----
$ git log --since=2.weeks
----

Esse comando funciona com diversos formatos - você pode especificar data como `"2008-01-15"`, ou uma data relativa como `"2 anos 1 dia e 3 minutos atrás"`.

Você também pode filtrar a lista de submissões que coincidem com algum critério de busca.
A opção `--autor` permite que você filtre um autor específico, e a opção `--grep` permite que você procure por palavras-chave em uma mensagem de submissão. (Perceba que se você quiser especificar tanto a opção autor quanto grep, você precisa adicionar `--all-match` ou o comando coincidirá as submissões com ambas opções.)

Outro filtro realmente útil é a opção `-S` que recebe um texto e mostra apenas as submissões que introduziram uma mudança no código, que adicionou ou removeu aquele texto.
Por hora, se você quiser encontrar a última submissão que adiconou ou removeu uma referência para uma função especifica, você pode chamar:

[source,console]
----
$ git log -S nome_da_funcão
----

A última opção realmente útil para passar para o `git log` como filtro é um caminho.
Se você especificar um diretório ou um nome de arquivo, você pode limitar a saída de log para submissões que introduziram uma mudança naqueles arquivos.
Isso é sempre a última opção e é geralmente precidida por dois traços para separar os caminhos das opções.

Em <<opcoes_limite,Opções de Limite>> nós vamos listar essas opções e algumas outras que também são comuns para sua referência.

[[opcoes_limite]]
.Opções para limitar a saída do `git log`
[cols="2,4",options="header"]
|===============================
| Opção                 | Descrição
| `-(n)`                | Mostra apenas as últimas n submissões
| `--since`, `--after`  | Limita as submissões para aquelas feitas após a data especificada.
| `--until`, `--before` | Limita as submissões para aquelas feitas antes a data especificada.
| `--author`            | Mostra apenas as submissões nas quais o autor coincide com um texto especificado.
| `--commiter`          | Mostra apenas as submissões nas quais o committer coincida com o texto espeficado.
| `--grep`              | Mostra apenas as submissões com uma mensagem de submissão contendo o texto.
| `-S`                  | Mostra apenas as submissões adicionando ou removendo um código que coincida com o texto.
|===============================

Por exemplo, se você quiser ver quais submissões modificam arquivos de teste na histórico do cóidigo fonte Git, que foi submetido por Junio Hamano em um mês de Outubro de 2008 e não seja uma submissão de fusão, você pode executar algo como isto: (((filtrando log)))

[source,console]
----
$ git log --pretty="%h - %s" --author=gitster --since="2008-10-01" \
   --before="2008-11-01" --no-merges -- t/
5610e3b - Fix testcase failure when extended attributes are in use
acd3b9e - Enhance hold_lock_file_for_{update,append}() API
f563754 - demonstrate breakage of detached checkout with symbolic link HEAD
d1a43f2 - reset --hard/read-tree --reset -u: remove unmerged new paths
51a94af - Fix "checkout --track -b newbranch" on detached HEAD
b0ad11e - pull: allow "git pull origin $something:$current_branch" into an unborn branch
----

Das quase 40,000 submissões no histórico do código fonte do Git, esse comando mostra os 6 que coincidem com esses critérios.
