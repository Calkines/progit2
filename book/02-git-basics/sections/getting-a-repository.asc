[[_getting_a_repo]]
=== Obtendo um repostório Git

Você pode criar um projeto Git usando duas abordagens principais.
A primeira pega um projeto que já existe, ou um diretório, e o importa no Git.
A segunda clona um repositório Git existente de outro servidor.

==== Inicializando um Repositório em um Diretório Existente

Se você começar a rastrear um projeto existente no Git, você precisa ir até o diretório do projeto. Se você nunca fez isso, você pode encontrar uma pequena diferença na forma de fazê-lo, a depender do sistema operacional que você está executando:

para Linux:
[source,console]
----
$ cd /home/user/your_repository
----
para Mac:
[source,console]
----
$ cd /Users/user/your_repository
----
para Windows:
[source,console]
----
$ cd c:/user/your_repository
----

e digite:

[source,console]
----
$ git init
----

Isso cria um novo subdiretório chamado `.git` que contém todos os arquivos necessários de seu repositório - um esqueleto do repositório Git.
Neste ponto, nada no seu projeto está sendo rastreado.
(Veja <<..\10-git-internals\1-git-internals#,Git Internamente>> para mais informações sobre o que são exatamente os arquivos dentro do diretório `.git`, que você acabou de criar.)(((git commands, init)))


Se você quer inciar um o versionamento de arquivos existentes (em oposição a um diretório vazio), você provavelmente precisa começar a rastrear aqueles arquivos e submetê-los uma primeira vez.
Você pode realizar isso com alguns comandos `git add` que especificam os arquivos que você quer rastrear, seguido por um `git commit`:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
----

Nós vamos falar sobre o que fazem esses comandos em um minuto.
Neste ponto, você tem um repositório Git com arquivos rastreados e uma submissão inicial.


[[_git_cloning]]
==== Clonando um Repositório Existente

Se você quiser pegar uma cópia de um repositório Git existente - por exemplo, um projeto que você gostaria de contribuir - o comando que você precisa é `git clone`.
Se você está familiarizado com outros sistemas VCS, como Subversion, você perceberá que o comando é "clone" não "checkout".
Essa é um distinção importante - em vez de pegar um cópia de trabalho, o Git recebe uma cópia completa de quase todos dados que o servidor possui.
Cada versão de cada arquivo, pensando no histórico do projeto, é baixado por padrão quando você executa o `git clone`.
De fato, se o disco do servidor corromper, muitas vezes você pode usar qualquer um dos clones nos clientes para configurar o servidor de volta ao estado que ele estava quando foi clonado (você pode perder algum validador que só existe no lado do servidor, mas todo dado versionado deve estar lá - veja <<

In fact, if your server disk gets corrupted, you can often use nearly any of the clones on any client to set the server back to the state it was in when it was cloned (you may lose some server-side hooks and such, but all the versioned data would be there – see <<..\04-git-server\1-git-server#>> for more details).

You clone a repository with `git clone [url]`.(((git commands, clone)))
For example, if you want to clone the Git linkable library called libgit2, you can do so like this:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

That creates a directory named ``libgit2'', initializes a `.git` directory inside it, pulls down all the data for that repository, and checks out a working copy of the latest version.
If you go into the new `libgit2` directory, you'll see the project files in there, ready to be worked on or used.
If you want to clone the repository into a directory named something other than ``libgit2'', you can specify that as the next command-line option:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

That command does the same thing as the previous one, but the target directory is called `mylibgit`.

Git has a number of different transfer protocols you can use.
The previous example uses the `https://` protocol, but you may also see `git://` or `user@server:path/to/repo.git`, which uses the SSH transfer protocol.
<<_git_on_the_server>> will introduce all of the available options the server can set up to access your Git repository and the pros and cons of each.
