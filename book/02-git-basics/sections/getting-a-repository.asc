[[_getting_a_repo]]
=== Obtendo um repostório Git

Você pode criar um projeto Git usando duas abordagens principais.
A primeira, pega um projeto que já existe, ou um diretório, e o importa no Git.
A segunda, clona um repositório Git existente de outro servidor.

==== Inicializando um Repositório em um Diretório Existente

Se você começar a rastrear um projeto existente no Git, você precisa ir até o diretório do projeto. Se você nunca fez isso, você pode encontrar uma pequena diferença na forma de fazê-lo, a depender do sistema operacional que você está executando:

para Linux:
[source,console]
----
$ cd /home/user/your_repository
----
para Mac:
[source,console]
----
$ cd /Users/user/your_repository
----
para Windows:
[source,console]
----
$ cd c:/user/your_repository
----

e digite:

[source,console]
----
$ git init
----

Isso cria um novo subdiretório chamado `.git` que contém todos os arquivos necessários de seu repositório - um esqueleto do repositório Git.
Neste ponto, nada no seu projeto está sendo rastreado.
(Veja <<..\10-git-internals\1-git-internals#,Git Internamente>> para mais informações sobre o que são exatamente os arquivos dentro do diretório `.git`, que você acabou de criar.)(((git commands, init)))


Se você quer inciar um o versionamento de arquivos existentes (em oposição a um diretório vazio), você provavelmente precisa começar a rastrear aqueles arquivos e submetê-los uma primeira vez.
Você pode realizar isso com alguns comandos `git add` que especificam os arquivos que você quer rastrear, seguido por um `git commit`:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'initial project version'
----

Nós vamos falar sobre o que fazem esses comandos em um minuto.
Neste ponto, você tem um repositório Git com arquivos rastreados e uma submissão inicial.


[[_git_cloning]]
==== Clonando um Repositório Existente

Se você quiser pegar uma cópia de um repositório Git existente - por exemplo, um projeto que você gostaria de contribuir - o comando que você precisa é `git clone`.
Se você está familiarizado com outros sistemas VCS, como Subversion, você perceberá que o comando é "clone" não "checkout".
Essa é uma distinção importante - em vez de pegar uma cópia de trabalho, o Git recebe uma cópia completa de quase todos dados que o servidor possui.
Cada versão de cada arquivo, pensando no histórico do projeto, é baixado por padrão quando você executa o `git clone`.
De fato, se o disco do servidor corromper, muitas vezes você pode usar qualquer um dos clones nos clientes para configurar o servidor de volta ao estado que ele estava quando 
foi clonado (você pode perder algum validador que só existe no lado do servidor, mas todo dado versionado deve estar lá - veja <<..\04-git-server\1-git-server#git-on-a-server,Git no Servidor>> para mais detalhes).

Se você clonar um repositório com `git clone [url]`. (((git commands, clone)))
Por exemplo, se você quer clonar a biblioteca extensível do Git chamada libgit2, você pode fazer desta forma:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

Isso cria um diretório chamado ``libgit2`` com um diretório `.git` dentro, baixa todos os dados para aquele repositório, e prepara uma cópia de trabalho com a última versão.
Se abrir o novo diretório `libgit2`, você verá os arquivos do projeto lá, pronto para uso.
Se você quiser clonar o repositório em um diretório com nome diferente de ``libgit2``, você pode especificar da seguinte forma:


[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----


Esse comando faz a mesma coisa que o anterior, mas o diretório de destino será nomeado como `mylibgit`.

O Git possui um número diferente de protocolos de transferência.
O exemplo anterior usa o protocolo `https://`, mas você pode ver também `git://` ou `user@server:path/to/repo.git`, que usam o protocolo de transferência SSH.
<<..\04-git-server#_git_on_the_server>> vai introduzir todas opções disponíveis para as quais o servidor pode ser configurado para acessar seu repositório Git e os prós e contras de cada opção.