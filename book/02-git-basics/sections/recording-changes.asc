=== Gravando Mudanças no Repositório

Você tem um genuíno repositório Git e uma cópia de trabalho pronta dos arquivos daquele projeto.
Você precisa fazer algumas mudanças e submeter as imagens daquelas mudanças para o seu repositório cada vez que o projeto chega a um estado que você quer gravar.

Lembre que cada arquivo no seu diretório de trabalho pode estar em um de dois estados: `rastreado` ou `não rastreado`.
Arquivos rastreados são arquivos que estavam na última imagem; eles podem ser `não modificados`, `modificados` ou `preparados`.
Arquivos não rastreados são todos os outros, quaisquer arquivos no seu diretório de trabalho que não estavam na sua última imagem e não estão na sua área de preparo (staging).
Quando você clona um repositório pela primeira vez, todos seus arquivos serão rastreados e não modificados, porque o Git os verifica na saída e você ainda não editou nada.

A medida que você edita seus arquivos, o Git os identifica como modificados, porque você os alterou desde sua última submissão (commit).
Você prepara(stage) esses arquivos modificados e então submete todos seus arquivos preparados (staged), e o ciclo se repete.

.O ciclo de vida dos estados de seus arquivos
image::images/lifecycle.png[O ciclo de vida dos estados de seus arquivos.]


[[_verificando_estado]]
==== Verificando o Estado de seus Arquivos

A ferramenta principal que você usa para determinar quais arquivos estão em quais estados é o comando `git status` . (((git commands, status)))
Se você executar este comando diretamente após um clone, você deve ver algo como:


[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

Isso significa que você tem um diretório de trabalho limpo - em outras palavras, nenhum de seus arquivos rastreados estão modificados.
O git também não encontrou nenhum arquivo não rastreado, senão eles estariam listados aqui.
Finalmente, o comando nos diz qual ramificação você está trabalhando e informa que não há divergência entre a essa nossa ramificação e a relativa no servidor.
Por hora, a ramificação será sempre ``master``, que é a padrão; você não precisa se preocupar com isso aqui.
<<..\03-git-branching#, Ramificação no Git>> deve percorrer o assunto e suas referências no detalhe.

Vamos dizer que você adicione um novo arquivo ao seu projeto, um simples arquivo README.
Se o arquivo não existia anteriormente, e você executar o `git status`, você vê seu arquivo como não rastreado da seguinte maneira:

[source,console]
----
$ echo 'My Project' > README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
  (use "git add <file>..." to include in what will be committed)

    README

nothing added to commit but untracked files present (use "git add" to track)
----

Você pode ver que seu novo arquivo README está não rastreado, porque está abaixo do cabeçalho de saída ``arquivos não rastreados``.
Não rastreado basicamente seginifica que o Git vê um arquivo que você não tinha anteriormente na imagem (submetido); O Git não começará a inclui-lo em sua imagem de submissão até que você explicitamente diga isso ao Git.
Isso garante que você não inclua de forma acidental arquivos de binários ou outros arquivos que você não tinha a intenção de incluir.


[[_rastreando_arquivos]]
==== Rastreando Novos Arquivos

Para começar a rastrear um novo arquivo, você usa o comando `git add`. (((git commands, add)))
Para começar rastrear um arquivo README, você pode executar isso:

[source,console]
----
$ git add README
----

Se você executar o comando de estado novamente, você pode ver que seu arquivo README agora está rastreado e preparado para ser submetido (commited):

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

----

Você pode dizer que o arquivo está preparado porque ele está abaixo do cabeçalho ``Mudanças para serem submetidas``.
Se você submeter neste momento, a versão do arquivo no histórico de submissões será a mesma de quando você executou o comando `git add`.
Você pode lembrar que quando você executou o comando `git init` mais cedo, então você executou `git add (files)` - que foi onde seus arquivos naquele diretório começaram a ser rastreados. (((git commands, init))) (((git commands, add)))
O comando `git add` pega um caminho para um arquivo ou diretório; se for um diretório, o comando adiciona todos arquivos naquele diretório de forma recursiva.

==== Preparando Arquivos Modificados

Vamos alterar um arquivo que você já rastreou.
Se você mudou um arquivo que estava sendo rastreado, por exemplo `CONTRIBUTING.md`, e então executou o comando `git status` novamente, você verá algo do tipo:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

O arquivo `CONTRIBUTING.md` aparece abaixo da seção chamada ``Mudanças não preparadas para a submissão`` - o que significa que um arquivo que está rastreado e foi modificado no diretório de trabalho, mas ainda não foi preparado.
Para prepará-lo, você executa o comando `git add`.
O comando `git add` tem propósitos multiplos - você o usa para começar a rastrear novos arquivos, para preparar arquivos, e para fazer outras coisas como marcar uma fusão, entre arquivos que estão em conflito, como resolvida.
É útil pensar nisso mais como ``adicione este conteúdo na próxima submissão`` em vez de ``adicione estes arquivos no projeto``. (((git commands, add)))
Vamos executar o comando `git add` agora e preparar o arquivo `CONTRIBUTING.md`, e, após isso, rodar o comando `git status` novamente:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

----

Ambos os arquivos estão preparados e devem participar da sua próxima submissão.
Até aqui, acreditamos que você se lembre de uma pequena modificação que você quer fazer no `CONTRIBUTING.md` antes de submetê-lo.
Então você o abre novamente e realiza a mudança, assim você está pronto para submetê-lo.
Contudo, vamos executar `git status` mais uma vez:

[source,console]
----
$ vim CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

----

Que diabos aconteceu?
Agora `CONTRIBUTING.md` está listado tanto como preparado como não preparado.
Como isso é possível?
Acontece que o Git prepara um arquivo exatamente como ele está quando você executa o comando `git add`.
Se você submetê-lo imediatamente, a versão do `CONTRIBUTING.md`, como ele era quando você rodou o comando `git add`, será submetida, não a versão do arquivo como ele parece em sua cópia de trabalho, no momento que você executa `git commit`. Se você modificar um arquivo depois de executar o `git add`, você precisará executar `git add` novamente para preparar a última versão desse arquivo:

[source,console]
----
$ git add CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README
    modified:   CONTRIBUTING.md
----

==== Status resumido

Enquanto a saída do comando `git status` é bem compreensiva, ela também é um pouco prolixa. O Git também tem um indicador de status resumido para que você possa ver suas mudanças de uma forma mais compacta. Se você executar `git status -s` ou `git status --short` você verá uma forma muito mais simplificada do comando:

[source,console]
----
$ git status -s
 M README
MM Rakefile
A  lib/git.rb
M  lib/simplegit.rb
?? LICENSE.txt
----

Novos arquivos que não estão rastreados possuem um `??` próximo, novos arquivos que já tenham sido adicionados à área de preparo possuem um `A`, arquivos modificados possuem um `M` e assim por diante.

Existem duas colunas na saída - a coluna a esquerda indica o estado da área de preparo e a coluna da direita indica o estado na árvore de trabalho.

Então, por exemplo, na saída anterior, o arquivo `README` foi modificado no diretório de trabalho, mas não foi preparado, enquanto o arquivo `lib/simplegit.rb` foi modificado e preparado.

O arquivo `Rakefile` foi modificado, preparado e modificado novamente, por isso existem mudanças que estão tanto preparadas como não preparadas.

[[_ignorando]]
==== Ignorando Arquivos

Às vezes, você vai ter uma classe de arquivos que você não quer que o Git os adicione automaticamente ou mesmo que estes sejam mostrados como não rastreados.
Esses geralmente são arquivos gerados automaticamente como arquivos de log ou arquivos produzidos pelo sistema de build.

Nestes casos, você pode criar uma padrão de listagem de arquivo que coincida com eles, em um arquivo chamado `.gitignore`.(((ignorando arquivos)))
Aqui está um exemplo de arquivo `.gitignore`:

[source,console]
----
$ cat .gitignore
*.[oa]
*~
----

A primeira linha diz ao Git para ignorar quaisquer arquivos terminando em ``.o`` ou ``.a``- objetos e arquivos mortos que podem ser produto da construção do seu código.
A segunda linha diz ao Git para ignorar todos arquivos quais os nomes terminem com um til (`~`), os quais são usados por muitos editores de texto como Emacs para marcar arquivos temporários.
Você também pode incluir um log, tmp, ou pid de um diretório; documentação gerada automaticamente; e outros. Criar um arquivo chamado `.gitignore` antes de você prosseguir é uma boa ideia, assim você não submeterá acidentalmente arquivos que você realmente não quer no seu repositório Git.

As regras dos padrão que você pode colocar no arquivo `.gitignore` estão abaixo:

*  Linhas em branco ou linhas começando por `#` são ignoradas.
*  Padrões globais funcionam (`glob patterns`).
*  Você pode começar padrões com uma barra para frente (`/`), evitando recursividade.
*  Você pode terminar padrões com uma barra para frente (`/`), especificando um diretório.
*  Você pode negar um padrão ao começa-lo com um ponto de exclamação (`!`).

Padrões globais são como expressões regulares simplificadas que o interpretador utiliza.
Um asterisco ( * ) coincide em nenhum ou mais caracteres; `[abc]` coincide em qualquer caracter dentro das chaves (neste caso a, b, ou c); um ponto de interrogação (`?`) coincide em um único caracter; e chaves fechando caracteres separados por um hífen (`[0-9]`) coincidem em qualquer caracter entre eles (neste caso de 0 a 9). Você também pode usar dois asteriscos para coincidir diretórios aninhados; `a/**/z` coincidirá `a/z`, `a/b/z`, `a/b/c/z`, e assim por diante.

Aqui vai outro exemplo de um arquivo .gitignore:

[source]
----
# no .a files
*.a

# but do track lib.a, even though you're ignoring .a files above
!lib.a

# only ignore the TODO file in the current directory, not subdir/TODO
/TODO

# ignore all files in the build/ directory
build/

# ignore doc/notes.txt, but not doc/server/arch.txt
doc/*.txt

# ignore all .pdf files in the doc/ directory
doc/**/*.pdf
----

[TIP]
====
O GitHub mantém uma lista extensa e compreensiva de bons arquivos de exemplo `.gitignore` para uma dezena de projetos e linguagens https://github.com/github/gitignore[] se você quiser um ponto de início para seu projeto.
====

[[_git_dif_preparado]]
==== Verificando suas Mudanças Preparadas ou Não Preparadas

Se o comando `git status` for muito vago para você - caso você queira saber exatamente o que você alterou, não apenas quais arquivos foram alterados - você pode usar o comando `git diff`.(((comandos git, diff)))
Nós cobriremos o comando `git diff` com mais detalhes depois, mas você provavelmente vai usá-lo geralmente para responder a duas questões: O que você alterou mas ainda não preparou? E o que você preparou que está prestes a submeter?
Embora o `git status` responda essas perguntas quase sempre listando os nomes dos arquivos, o `git diff` mostra a você as linhas exatas que foram removidas ou adicionadas, o remendo, como foi feito.

Vamos dizer que você edite e prepare um arquivo `README` novamente e então edite o arquivo `CONTRIBUING.md` sem prepará-lo. Caso você execute o comando `git status`, você mais uma vez vê algo do tipo:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Para ver o que você alterou mas não preparou, digite `git diff` sem nenhum argumento:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

O comando compara o que está em seu diretório de trabalho com o que está e sua área de preparo.
O resulto diz que você possui mudanças que foram feitas e ainda não foram preparadas.

Caso você queira ver o que você preparou e participará de sua próxima submissão, você pode usar o comando `git diff --staged`. Esse comando compara suas mudanças preparadas com sua última submissão.

[source,console]
----
$ git diff --staged
diff --git a/README b/README
new file mode 100644
index 0000000..03902a1
--- /dev/null
+++ b/README
@@ -0,0 +1 @@
+My Project
----

É importante perceber que apenas o comando `git diff` não mostra todas mudanças feitas desde sua última submissão - apenas mudanças não preparadas.
Isso pode ser confuso, porque se você preparar todas suas mudanças, o `git diff` não mostra saída nenhuma.

Como outro exemplo, se você preparou o arquivo `CONTRBUTING.md` e então fez uma edição nele, voce pode usar o `git diff` para ver as mudanças no arquivo que você preparou e as mudanças que você não preparou. 
Seria algo assim:

[source,console]
----
$ git add CONTRIBUTING.md
$ echo '# test line' >> CONTRIBUTING.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    modified:   CONTRIBUTING.md

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Agora você pode usar o `git diff` para ver o que continua como não preparado:

[source,console]
----
$ git diff
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 643e24f..87f08c8 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -119,3 +119,4 @@ at the
 ## Starter Projects

 See our [projects list](https://github.com/libgit2/libgit2/blob/development/PROJECTS.md).
+# test line
----

e `git diff --cached` para ver o que você preparou até agora (`--staged` e `--cached` são sinônimos): 

[source,console]
----
$ git diff --cached
diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8ebb991..643e24f 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -65,7 +65,8 @@ branch directly, things can get messy.
 Please include a nice description of your changes when you submit your PR;
 if we have to read the whole diff to figure out why you're contributing
 in the first place, you're less likely to get feedback and have your change
-merged in.
+merged in. Also, split your changes into comprehensive chunks if your patch is
+longer than a dozen lines.

 If you are starting to work on a particular area, feel free to submit a PR
 that highlights your work in progress (and note in the PR title that it's
----

[NOTE]
.Git Diff em uma Ferramenta Externa
====
Nós vamos continuar a usar o comando `git diff` de várias maneiras ao longo deste livro.
Existe outra forma de ver as diferenças, caso você prefira um modo gráfico ou externo de visualização.
Se você executar `git difftool` em vez de `git diff`, você pode visualizar qualquer dessas diferenças em softwares como Emerge, Viewdiff e muitos outros (inclusive produtos comerciais).
Execute `git difftool --tool-help` para ver o que está disponível no seu sistema. 
====

[[_submentendo_mudanças]]
==== Submetendo suas Mudanças

Agora que a área de preparo está configurada da maneira como você quer, você pode submeter suas mudanças.
Lembre que qualquer coisa que ainda não esteja  preparada - qualquer arquivo que você criou ou modificou, mas que ainda não executou o `git add` neles desde a última alteração - não participará da próxima submissão.
Eles permanecerão como arquivos modificados no disco.
Neste caso, vamos dizer que na última vez que você executou o `git status`, você viu que tudo foi preparado, então você está pronto para submeter suas mudanças. (((comandos git, status)))
A maneira mais simples de submeter é escrever `git commit`:(((comandos git, commit)))

[source,console]
----
$ git commit
----

Ao digitar isso, o seu editor de preferência será executado.
(Essa preferência é configurada pela variável de ambiente `$EDITOR` em sua ferramenta de linha de comando - geralmente vim ou emacs, embora você possa configurá-lo com qualquer ferramente que deseje usando o comando `git config --global core.editor` como você viu em <<_começando,Começando>>.(((editor, alterando padrões))))(((comandos git, config)))

O editor mostra o seguinte texto (este exemplo é de uma tela do editor Vim):

[source]
----

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Your branch is up-to-date with 'origin/master'.
#
# Changes to be committed:
#	new file:   README
#	modified:   CONTRIBUTING.md
#
~
~
~
".git/COMMIT_EDITMSG" 9L, 283C
----

Você pode ver que a mensagem de submissão padrão contém a última saída do comando `git status` de forma comentada e uma linha em branco bem no topo.
Você pode remover esses comentários e escrever sua mensagem para acompanhar a submissão, ou você pode apenas deixas os comentários ali para ajudá-lo a se lembrar o que você está submetendo. (Para uma lembrança mais detalhada do que você modificou, você pode passar a opção `-v` para o comando `git commit`.
Fazer isso também coloca as diferença da sua mudança no editor, assim você pode ver exatamente o que mudou no momento de submeter.)
Quando você sai do editor, o Git cria a submissão dos arquivos com aquela mensagem (com os comentários e a diferença).

Alternativamente, você pode escrever a mensagem que acompanha a submissão na mesma linha do comando `commit` ao especificar o indicador `-m` após o comando, assim:

[source,console]
----
$ git commit -m "Story 182: Fix benchmarks for speed"
[master 463dc4f] Story 182: Fix benchmarks for speed
 2 files changed, 2 insertions(+)
 create mode 100644 README
----

Agora que você criou sua primeira submissão!
Você pode ver que a submissão deu a você a saída sobre sí mesma: 
para qual ramificação você submeteu (`master`), qual o checksum SHA-1 a submissão possui (`463dc4f`), quantos arquivos foram modificados, e estatisticas sobre quantas linhas foram adicionadas e removidas na submissão.

Lembre que a submissão grava a imagem que você configura na sua área de preparo.
Qualquer coisa que você não preparar continuará lá como modificada; mas você pode fazer outra submissão para adicioná-la ao seu histórico.
Toda vez que você realiza uma submissão, você está gravando uma imagem do seu projeto que você pode reverter ou comparar futuramente.

==== Deixando a Área de Preparo de lado
(((área de preparo, ignorando)))
Embora a área de preparo possa ser incrivelmente útil para construção de submissões exatamente da forma como você quer, a área de preparo às vezes é um pouco mais complexa do que você precisa para seu fluxo de trabalho.

Se você quiser ignorar a área de preparo, o Git fornece um atalho simples. Adicionar a opção `-a` no comando `git commit` faz o Git preparar automaticamente cada arquivo que já está sendo rastreado antes de executar a submissão, permitindo que você pule a parte do `git add`:

[source,console]
----
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md

no changes added to commit (use "git add" and/or "git commit -a")
$ git commit -a -m 'added new benchmarks'
[master 83e38c7] added new benchmarks
 1 file changed, 5 insertions(+), 0 deletions(-)
----

Perceba como você não precisa executar o `git add` no arquivo `CONTRIBUTING.md` para este caso antes de submetê-lo. Isso acontece porque o indicador `-a` incluí todos arquivos modificados. Isso é conveniente, mas cuidado; as vezes esse indicador vai fazer você incluir mudanças não desejadas.

[[_removendo_arquivos]]
==== Removendo Arquivos
(((arquivos,remover)))
Para remover um arquivo do Git, você precisa removê-lo de seus arquivos rastreados (mais precisamente, removê-lo de sua área de preparo) e então submetê-lo.
O comando `git rm` faz isso, e também remove o arquivo de seu diretório de trabalho, assim você não vai vê-lo como não rastreado na próxima vez que executar o `git status`.

Se você simplesmente remover o arquivo de seu diretório de trabalho, isso mostra abaixo da área ``Alterado mas não atualizado`` (isto é, _não preparado_) na saída de seu comando ``git status``:

[source,console]
----
$ rm PROJECTS.md
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        deleted:    PROJECTS.md

no changes added to commit (use "git add" and/or "git commit -a")
----

Assim, se você executar `git rm`, isso deve preparar os arquivos para remoção:

[source,console]
----
$ git rm PROJECTS.md
rm 'PROJECTS.md'
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    deleted:    PROJECTS.md
----

A próxima vez que você submeter, o arquivo terá sido excluído e não será mais rastreado.
Se você modificou o arquivo e já o adicionou à área de preparo, você precisa forçar sua remoção com a opção `-f`.
Isso é uma funcionalidade de segurança para previnir remoção acidental de dados que ainda não foram gravados em uma imagem e que não podem ser recuperados do Git.

Outra coisa útil que você pode querer fazer é manter seu arquivo em sua árvore de tabalho mas removê-lo de sua área de preparo.
Em outras palavras, você pode quer manter o arquivo no seu disco rígido mas deixar de rastreá-lo com o Git.
Isso é particularmente útil se você esqueceu de adicionar alguma coisa ao seu arquivo `.gitignore` e acidentalmente preparou aquilo, como um grande arquivo de log ou um monte de arquivos gerados pelo compilador com a extensão `.a`.
Para fazer isso, use a opção `--cached`:

[source,console]
----
$ git rm --cached README
----

Você pode passar arquivos, diretórios, e padrões de arquivos globais para o comando `git rm`.
Isso significa que você pode fazer coisas como:

[source,console]
----
$ git rm log/\*.log
----

Perceba a barra invertida (`\`) na frente do `*`.
Isso é necessário porque o Git faz tem sua própria expansão de nome de arquivos, além da expansão de nome de arquivos da sua linha de comando.
Este comando remove todos arquivos que possuem a extensão `.log` no diretório `log/`.
Ou, você pode fazer fazer algo como isso:

[source,console]
----
$ git rm \*~
----

Esse comando remove todos arquivos que terminam com um `~`.

[[git_mv]]
==== Movendo Arquivos
(((arquivos,mover)))
Diferente de muitos outros sistemas de VCS, o Git não rastreaia seus movimentos de arquivo explicitamente.
Caso você renomeie seu arquivo no Git, nenhum metadados é armazenado no Git que diga que você renomeou o arquivo.
Contudo, o Git é bem esperto para descobrir isso após o ocorrido, nós vamos lidar com a detecção de movimentação de arquivo logo mais.

Portanto, é um pouco confuso que o Git tenha um comando `mv`.
Se você quer renomear um arquivo no Git, você pode executar algo assim:

[source,console]
----
$ git mv file_from file_to
----

e isso funciona bem.

De fato, se você executar algo como isso e olhar para o status, você perceberá que o Git considera isso como um arquivo renomeado:

[source,console]
----
$ git mv README.md README
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
----

Contudo, isso é equivalente a executar algo assim:

[source,console]
----
$ mv README.md README
$ git rm README.md
$ git add README
----

O Git percebe que há uma mudança de nome implicita, então não importa se você renomeou um arquivo daquela maneira ou com o comando `mv`. A única diferença real é que o `git mv` é um comando em vez de dois - é uma função conveniente.
Mais importante, você pode usar qualquer ferramente que queira para renomear o arquivo, e prepará-lo depois, antes de submetê-lo.