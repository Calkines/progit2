[[_desfazendo]]
=== Desfazendo as Coisas

Em qualquer momento, você pode querer desfazer alguma coisa.
Aqui, vamos revisar algumas ferramentas básicas para desfazer mudanças que você tenha feito.
Cuidado, porque você nem sempre poderá desfazer algo que você já voltou atrás.
Esta é uma das poucas áreas no Git na qual você pode perder algum trabalho se você fizer errado.

Uma das necessidades mais comuns para desfazer algo é quando você submete algo muito cedo e esquece possivelmente de adicionar alguns arquivos, ou você bagunça sua mensagem de submissão.
Se você quer quiser enviar novamente aquela submissão, você pode executar a submissão acompanhado da opção `--amend`:

[source,console]
----
$ git commit --amend
----

Esse comando pega sua área de preparo e a usa para a submissão.
Se você não tiver feito mudanças desde sua última submissão (por exemplo, você executa esse comando imediatamente depois de uma submissão), então sua imagem parecerá a mesma, e tudo que você vai mudar será sua mensagem de submissão.

O mesmo editor de mensagens de submissão é acionado, mas nele já está a mensagem de sua submissão anterior.
Você pode editá-la, mas isso vai sobrescrever sua submissão anterior.

Como exemplo, caso você submeta e perceba que esqueceu de preparar as mudanças no arquivo que você queria adicionar nesta submissão, você pode fazer algo assim:

[source,console]
----
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
----

Você encerra com uma única submissão - a segunda substitui o resultado da primeira.

[[_despreparando]]
==== Despreparar um Arquivo Preparado

As próximas duas seções mostram como trabalhar com sua área de preparo e mudanças de diretório.
A parte boa é que o comando que você usa para determinar o estado daquelas duas áreas também permite você relembrar como desfazer mudanças nelas.
Por exemplo, vamos dizer que você tenha alterado dois arquivos e queira submetê-los como duas mudanças separadas, mas você acidentalmente escreve `git add *` e prepara os dois.
Como você pode despreparar um dos arquivos?
O comando `git status` lembra você:

[source,console]
----
$ git add *
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----


Bem abaixo do texto ``Mudanças para serem submetidas``, é dito use `git reset HEAD <file>...` para despreparar.
Então, vamos usar esse aviso para despreparar o arquivo `CONTRIBUTING.md`:

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

The command is a bit strange, but it works.
The `CONTRIBUTING.md` file is modified but once again unstaged.

[NOTE]
=====
It's true that `git reset` can be a dangerous command, especially if you provide the `--hard` flag.
However, in the scenario described above, the file in your working directory is not touched, so it's relatively safe.
=====

For now this magic invocation is all you need to know about the `git reset` command.
We'll go into much more detail about what `reset` does and how to master it to do really interesting things in <<_git_reset>>.

==== Unmodifying a Modified File

What if you realize that you don't want to keep your changes to the `CONTRIBUTING.md` file?
How can you easily unmodify it – revert it back to what it looked like when you last committed (or initially cloned, or however you got it into your working directory)?
Luckily, `git status` tells you how to do that, too.
In the last example output, the unstaged area looks like this:

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

It tells you pretty explicitly how to discard the changes you've made.
Let's do what it says:

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

You can see that the changes have been reverted.

[IMPORTANT]
=====
It's important to understand that `git checkout -- <file>` is a dangerous command.
Any changes you made to that file are gone – Git just copied another file over it.
Don't ever use this command unless you absolutely know that you don't want the file.
=====

If you would like to keep the changes you've made to that file but still need to get it out of the way for now, we'll go over stashing and branching in <<_git_branching>>; these are generally better ways to go.

Remember, anything that is _committed_ in Git can almost always be recovered.
Even commits that were on branches that were deleted or commits that were overwritten with an `--amend` commit can be recovered (see <<_data_recovery>> for data recovery).
However, anything you lose that was never committed is likely never to be seen again.
