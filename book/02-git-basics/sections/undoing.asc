[[_desfazendo]]
=== Desfazendo as Coisas

Em qualquer momento, você pode querer desfazer alguma coisa.
Aqui, vamos revisar algumas ferramentas básicas para desfazer mudanças que você tenha feito.
Cuidado, porque você nem sempre poderá desfazer algo que você já voltou atrás.
Esta é uma das poucas áreas no Git na qual você pode perder algum trabalho se você fizer errado.

Uma das necessidades mais comuns para desfazer algo é quando você submete algo muito cedo e esquece possivelmente de adicionar alguns arquivos, ou você bagunça sua mensagem de submissão.
Se você quiser enviar novamente aquela submissão, você pode executar a submissão acompanhado da opção `--amend`:

[source,console]
----
$ git commit --amend
----

Esse comando pega sua área de preparo e a usa para a submissão.
Se você não tiver feito mudanças desde sua última submissão (por exemplo, você executa esse comando imediatamente depois de uma submissão), então sua imagem parecerá a mesma, e tudo que você vai mudar será sua mensagem de submissão.

O mesmo editor de mensagens de submissão é acionado, mas nele já está a mensagem de sua submissão anterior.
Você pode editá-la, mas isso vai sobrescrever sua submissão anterior.

Como exemplo, caso você submeta e perceba que esqueceu de preparar as mudanças no arquivo que você queria adicionar nesta submissão, você pode fazer algo assim:

[source,console]
----
$ git commit -m 'initial commit'
$ git add forgotten_file
$ git commit --amend
----

Você encerra com uma única submissão - a segunda substitui o resultado da primeira.

[[_despreparando]]
==== Despreparar um Arquivo Preparado

As próximas duas seções mostram como trabalhar com sua área de preparo e mudanças de diretório.
A parte boa é que o comando que você usa para determinar o estado daquelas duas áreas também permite você relembrar como desfazer mudanças nelas.
Por exemplo, vamos dizer que você tenha alterado dois arquivos e queira submetê-los como duas mudanças separadas, mas você acidentalmente escreve `git add *` e prepara os dois.
Como você pode despreparar um dos arquivos?
O comando `git status` lembra você:

[source,console]
----
$ git add *
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md
----


Bem abaixo do texto ``Mudanças para serem submetidas``, é dito use `git reset HEAD <file>...` para despreparar.
Então, vamos usar esse aviso para despreparar o arquivo `CONTRIBUTING.md`:

[source,console]
----
$ git reset HEAD CONTRIBUTING.md
Unstaged changes after reset:
M	CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

O comando é um pouco estranho, mas ele funciona.
O arquivo `CONTRIBUTING.md` está modificado mas não está preparado (novamente).

[NOTE]
====
É verdade que o `git reset` pode ser um comando perigoso, especialmente se você fornecer a opção `--hard`. Contudo, no cenário descrito acima, o arquivo em seu diretório de trabalho não foi alterado, então isso é realtivamente seguro.
====

Por hora essa mágica de invocação é tudo que você precisa saber sobre o comando `git reset`.
Nós vamos entrar em muito mais detalhes do que o `reset` faz e como aprender tudo sobre ele para fazer coisas realmente interessantes em <<git_reset, Comando git reset>>.

==== Desfazendo uma alteração feita em um arquivo

O que acontece se você perceber que não quer manter as alterações feitas no arquivo `CONTRIBUTING.md`?
Como você pode facilmente descartar a modificação - revertê-la para a forma como era na última submissão (ou inicialmente clonado, ou da forma como estava em seu diretório de trabalho)?
Felizmente, o `git status` também diz a você como fazer isso.
No último exemplo de saída, a área de não preparo parece com isto:

[source,console]
----
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

    modified:   CONTRIBUTING.md
----

Ele diz a você de forma bem explicita como descartar as mudanças que você fez.
Vamos fazer o que ele diz:

[source,console]
----
$ git checkout -- CONTRIBUTING.md
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README

----

Você pode ver que as mudanças foram revertidas.

[IMPORTANT]
====
É importante que você compreenda que o `git checkout -- <arquivo>` é um comando perigoso.
Qualquer mudança que você fez a um arquivo será perdida - o Git apenas copiou outro arquivo sobre o primeiro.
Nunca use esse comando a menos que você saiba absolutamente que você não quer o arquivo.
====

Caso você queira manter as mudanças que você tenha feito naquele arquivo, mas ainda precise tirá-lo do caminho neste momento, nós falaremos sobre stashing e ramificação em <<git_braching, Ramificação no Git>>; essas são, geralmente, formas melhores de fazê-lo.

Lembre, qualquer coisa que está _submetida_ no Git pode quase sempre ser recuperada.
Mesmo submissões que estavam em ramificações que foram deletadas ou submissões que foram sobrescritas pela opção `--amend` de um comando `commit` podem ser recuperadas (veja <<data_recovery,recuperação de dados>> para mais informações.
Contudo, qualquer coisa que você perder que não foi submetida, também, muito provavelmente nunca será vista novamente.
