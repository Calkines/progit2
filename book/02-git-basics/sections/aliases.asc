[[_atalhos_git]]
=== Atalhos no Git

(((atalhos)))
Antes de terminarmos o capítulo do básico com Git, temos apenas mais uma pequena dica para que você possa tornar sua experiência com Git mais simples, fácil, e mais familiar: atalhos.
Nós não vamos nos referir ou asummir que você já tenha os usado previamente neste livro, mas você provavelmente sabe como usá-los.

O Git não infere seus comandos automáticamente se você digitá-los de forma parcial. Caso você não queira digitar todo o comando para cada comando do Git, você pode facilmente configurá-los como um atalho para cada comando, usando `git config`.(((comandos git, config)))
Aqui estão alguns dos exemplos que você pode querer configurar:

[source,console]
----
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
----

Isso significa que, por exemplo, em vez de digitar git commit, você precisa apenas digital `git ci`.
Como você vai usar o Git, você vai provavelmente usar outros comandos com frequencia também; não hesite em criar novos atalhos.

Essa técnica pode também ser muito útil quando criamos comandos que você pensa que deveriam existir.
Por exemplo, para corrigir um problema de usabilidade que você encontrou com a remoção de um arquivo da área de preparo, você pode adicionar seu próprio comando de despreparo para o Git:

[source,console]
----
$ git config --global alias.unstage 'reset HEAD --'
----

Isso faz os dois comandos seguintes equivalentes:

[source,console]
----
$ git unstage fileA
$ git reset HEAD -- fileA
----

E parece um pouco mais claro.
Também é comum adicionar um comando `last`, como este:

[source,console]
----
$ git config --global alias.last 'log -1 HEAD'
----

Dessa forma, você pode ver a última submissão de forma fácil:

[source,console]
----
$ git last
commit 66938dae3329c7aebe598c2246a8e6af90d04646
Author: Josh Goebel <dreamer3@example.com>
Date:   Tue Aug 26 19:48:51 2008 +0800

    test for current head

    Signed-off-by: Scott Chacon <schacon@example.com>
----

Como você pode dizer, o Git simplesmente substitui o novo comando com qualquer coisa que você definiu como atalho.
Contudo, talvez você queira executar um comando externo, em vez de um subcomando do Git.
Neste caso, você inicia o comando com um caractere `!`.
Isso é útil caso você escreva suas próprias ferramentas que trabalham com repositórios Git.

Nós podemos demonstrar por atalho `git visual` executando `gitk`:

[source,console]
----
$ git config --global alias.visual '!gitk'
----
