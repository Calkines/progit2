[[_visão_geral_de_ramificações_git]]
=== Ramificações em Poucas Palavras

Para realmente entender a maneira como o Git faz ramificações, nós precisamos voltar uma etapa e examinar como Git armazena seus dados.

Como você pode lembrar de <<_getting_started, Começando>>, o Git não armazena dados como uma série de conjunto de mudanças ou diferenças, mas em vez disso armazena como uma série de imagens.

Quando você faz uma submissão, o Git armazena o objeto de submissão que contém um ponteiro para a imagem do conteúdo que você preparou.
Esse objeto também contém o nome do autor e e-mail, a mensagem que você escreveu, e ponteiros para a submissão ou submissões que diretamente vêm antes desta (seu pai ou pais): nenhum pai para uma submissão inicial, um pai para uma submissão normal, e múltiplos pais para uma submissão, que resulta de uma fusão ou duas ou mais ramificações. 

Para visualizar isso, vamos assumir que você tem um diretório contendo três arquivos, e você preparou todos eles e os submete.
Ao prepar os arquivos isso computa o checksum para cada um deles (o hash SHA-1 que mencionamos em <<_getting_started, Começando>>), armazena aquela versão do arquivo no repositório Git (o Git refere-se a eles como blobs), e adiciona um checksum para área de preparo:

[source,console]
----
$ git add README test.rb LICENSE
$ git commit -m 'The initial commit of my project'
----

Quando você cria a submissão, executando o comando `git commit`, o Git gera o checksum para cada subdiretório (neste caso, apenas o diretório raiz do projeto) e armazena os três objetos no repositório do Git.
O Git então cria o objeto de submissão que tem o metadado e o ponteiro para o árvore do projeto raiz, assim ele pode recriar aquela imagem quando necessário.(((comandos git, commit)))

Seu repositório Git, agora contém cinco objetos: um blob para os conteúdos de cada um dos três arquivos, uma árvore que lista os conteúdos do diretório e especifica quais nomes de arquivos são armazenados como blobs, e uma submissão com o ponteiro para a árvore raiz e todas os metadados de submissões.

.A commit and its tree
image::images/commit-and-tree.png[Uma submissão e sua árvore.]

Se você fizer algumas mudanças e submeter novamente, a próxima submissão armazenará um ponteiro para a submissão imediatamente anterior.

.Submissões e seus pais
image::images/commits-and-parents.png[Submissões e seus pais.]

Uma ramificação no Git é simplesmente um ponteiro leve e móvel para uma dessas submissões. O nome da ramificação padrão no Git é `master`.
Assim que você começar a fazer submissões, você está dando a ramificação `master` esses ponteiros que você submeteu.
Toda vez que você submete, há um mudança para frente automaticamente.

[NOTE]
====
A ramificação ``master`` no Git não é uma ramificação especial.(((master)))
Ela é examente uma ramificação qualquer.
A única razão para que todo repositório tenha uma é que o comando `git init` a cria por padrão e a maioria das pessoas não se importam em mudá-la.
====

.Uma ramificação e seu histórico de submissões
image::images/branch-and-history.png[Uma ramificação e seu histórico de submissões.]

[[_create_new_branch]]
==== Criando uma Nova Ramificação
(((ramificação, criacao)))
O que acontece se você criar uma nova ramificação?
Bem, fazer isso cria um novo ponteiro para você se movimentar.
Vamos dizer que você crie uma nova ramificação chamada testando.
Você faz isso com o comando `git branch`:(((comandos git, branch)))

[source,console]
----
$ git branch testing
----

Isso cria um novo ponteiro para a mesma submissão que você está atualmente trabalhando.

.Dois pontos de ramificação para a mesma série de submissões
image::images/two-branches.png[Dois pontos de ramificação para a mesma série de submissões.]

Como o Git sabe em qual ramificação você está trabalhando?
Ele mantém um ponteiro especial chamado `HEAD`.
Perceba que isso é muito diferente do conceito de `HEAD` em outros SCVs que você possa ter usado, como Subversion ou CVS.
No Git, isso é um ponteiro para a ramificação local que você está atualmente trabalhando.
Neste caso, você continuará na `master`.
O comando `git branch` apenas _cria_ uma nova ramficação - ele não altera o ponteiro para aquela ramificação.

.O ponteiro HEAD para a ramificação
image::images/head-to-master.png[O ponteiro HEAD para a ramificação.]

Você pode facilmente ver isso rudando um simples comando `git log`, que lhe mostra para o HEAD está apontando.
Essa opção é chamada de `--decorate`.

[source,console]
----
$ git log --oneline --decorate
f30ab (HEAD -> master, testing) add feature #32 - ability to add new formats to the central interface
34ac2 Fixed bug #1328 - stack overflow under certain conditions
98ca9 The initial commit of my project
----

Você pode ver as ramificações ``master`` e ``testing`` que estão logo a direita da submissão `f30ab`.

[[_switching_branches]]
==== Alternando Ramificações

(((ramificações, alternando)))
Para alternar para uma ramificação existente, você pode executar o comando `git checkout`.(((comandos git, checkout)))
Vamos trocar para nova ramificação `testing`:

[source,console]
----
$ git checkout testing
----

Isso move o `HEAD` para apontar para a ramificação `testing`.

.HEAD aponta para a ramificação atual
image::images/head-to-testing.png[HEAD aponta para a ramificação atual.]

Qual é o significado disso?
Bem, vamos fazer outra submissão:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made a change'
----

.O HEAD da marcação se move para frente quando uma submissão é feita.
image::images/advance-testing.png[O HEAD da marcação se move para frente quando uma submissão é feita.]

Isso é interessante, porque agora sua ramificação `testing` foi movida para frente, mas sua ramificação `master` continua no mesmo ponto de submissão de quando você rodou o `git checkout` para mudar de ramificações. 
Vamos alterar de volta para a ramificação `master`:

[source,console]
----
$ git checkout master
----

.O HEAD se move quando você usa o checkout
image::images/checkout-master.png[O HEAD se move quando você usa o checkout.]

Aquele comando fez duas coisas.
Ele moveu o ponteiro HEAD de volta ao ponto da ramificação `master`, e ele reverteu os arquivos em seu diretório de trabalho de volta para aquela imagem, que o `master` apontava.
Isso também significa que as mudanças que você faz neste ponto a diante vão divergir de uma versão antiga do projeto.
Essencialmente isso desfaz o trabalho que você fez na ramificação `testing`, assim você pode ir em uma direção diferente.

[NOTE]
.Alternar ramificações muda os arquivos no seu diretório de trabalho
====
É importante perceber que quando você alterna ramificações no Git, seu diretório de trabalho vai sofrer modificações.
Caso você alterne para uma ramificação antiga, seu diretório de trabalho será revertido para parecer como quando você o deixou na última vez que fez uma submissão naquela ramificação.
Se o Git não conseguir fazer isso claramente, ele não permitirá que você faça a troca de ramificações.
====

Vamos fazer algumas mudanças e submeter novamente:

[source,console]
----
$ vim test.rb
$ git commit -a -m 'made other changes'
----

Agora seu histórico de projeto divergiu (veja <<divergent_history,Histórico de Divergência>>).
Você criou e alternou para o ramificação, fez algum trabalho nela, e então alternou de volta para a ramificação principal e fez outro trabalho.
Ambas as mudanças estão isoladas em ramificações separadas: você pode alternar entre as ramificações e fazer a fusão delas quando você estiver pronto.
E você fez tudo isso apenas com simples comandos como `branch`, `checkout`, e `commit`.

[[divergent_history]]
.História Divergente
image::images/advance-master.png[História Divergente.]

Você também pode ver isso facilmente com o comando `git log`.
Se você executar `git log --oneline --decorate --graph --all`, isso vai exibir o histórico de submissões, mostrando onde os pontos de ramificação estão e como seu histórico divergiu.

[source,console]
----
$ git log --oneline --decorate --graph --all
* c2b9e (HEAD, master) made other changes
| * 87ab2 (testing) made a change
|/
* f30ab add feature #32 - ability to add new formats to the
* 34ac2 fixed bug #1328 - stack overflow under certain conditions
* 98ca9 initial commit of my project
----

Porque a ramificação no Git é atualmente um simples arquivo que contém os 40 caracteres SHA-1 checksum da submissão que aponta para, ramificações são baratas para criar e destruir.
Criar uma nova ramificação é rápido e simples como escrever 41 bytes em um arquivo (40 caracteres e uma nova linha).

Isso é um nítido contraste com a forma que as ferramentas mais antigas de SCVs fazem ramificação, o que involve copiar todo o conteúdo do projeto para arquivos em um diretório secundário. Isso pode levar muitos segundos ou minutos, dependendo do tamanho do projeto, enquanto no Git o processo é sempre instantâneo.
Também, porque você está gravando os pais quando faz uma submissão, encontrar uma base de fusão adequada para executar uma fusão é automaticamente feito para nós e é geralmente muito fácil de fazer.
Essas funcionalidade ajudam a encorajar os desenvolvedores a criar e usar ramificações frequentemente.

Vamos ver o porquê você deveria fazer assim.