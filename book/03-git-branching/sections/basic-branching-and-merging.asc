=== O básico sobre Ramificação e Fusão

Vamos ver um simples exemplo de ramificação e fusão com um fluxo de trabalho que você pode usar no mundo real.
Você seguirá as seguintes etapas:

. Fazer um trabalho num site.
. Criar uma ramificação para uma nova história que você está trabalhando.
. Fazer algum trabalho nesta ramificação.

Nesta etapa, você vai receber uma ligação, dizendo que outro problema é critico e você precisa resolvê-lo.
Você fará o seguinte:

. Vai alternar para sua ramificação de produção.
. Criar uma ramificação para adicionar a correção.
. Depois de testá-la, fará a fusão da correção na ramificação, e enviará para produção.
. Voltará para sua história original e continuará trabalhando.

[[_basic_branching]]
==== O básico sobre Ramificação

(((branches, fluxo de trabalho básico)))
Primeiro, vamos dizer que você esteja trabalhando em um projeto que já tenha algumas submissões.

.Um simples histórico de submissões
image::images/basic-branching-1.png[Um simples histórico de submissões.]

Você decidiu que vai trabalhar no problema #53, disponível em qualquer sistema de rastreamento de problemas que sua empresa utilize.
Para criar um ramificação e alternar para ela ao mesmo tempo, você pode executar o comando `git checkout` com a opção `-b`:

[source,console]
----
$ git checkout -b iss53
Switched to a new branch "iss53"
----

Isso é um atalho para:

[source,console]
----
$ git branch iss53
$ git checkout iss53
----

.Criar um novo ponto de ramificação
image::images/basic-branching-2.png[Criar um novo ponto de ramificação.]

Você trabalha no seu website e faz algumas submissões.
Fazer isso move a ramificação para frente, porque você está com ela selecionada (isto é, seu `HEAD` está apontando para ela):

[source,console]
----
$ vim index.html
$ git commit -a -m 'added a new footer [issue 53]'
----

.A ramificação `iss53` foi movida para frente junto com seu trabalho
image::images/basic-branching-3.png[A ramificação `iss53` foi movida para frente junto com seu trabalho.]

Agora você recebe a ligação dizendo há um problema com o website, e você precisa resolvê-lo imediatamente.
Com o Git, você não precisa implementar sua correção do `iss53` junto com as mudanças realizadas, e você não tem que realizar muito esforço para reverter essas mudanças antes que você possa trabalhar aplicando as correções para aquilo que está em produção.
Tudo que você precisa fazer é alternar de volta para a ramificação `master`.

Contudo, antes de fazer isso, perceba que se seu diretório de trabalho, ou área de preparo, possui mudanças não submetidasque conflitam com a ramificação que você está selecionando, o Git não vai permitir que você alterne.
É melhor ter um estado de trabalho limpo quando for selecionar outra ramificação.
Existem maneiras de contornar isso (nomeadamente, `stashing` ou `commit amending`), as quais vamos cobrir mais tarde em <<git_stashing,Acumular no Git>>.

No momento, vamos assumir que você submeteu todas as mudanças, assim você pode alternar de volta para a ramificação `master`:

[source,console]
----
$ git checkout master
Switched to branch 'master'
----

Neste ponto, seu diretório de trabalho está exatamente da mesma forma como era antes de você iniciar o trabalho com o problema #53, e você pode se concentrar na sua correção.
Isso é um ponto importante para lembrar: quando você alterna ramificações, o Git reseta seu diretório de trabalho para parecer como era na última vez que você submeteu algo para nele.

Proximo, você tem uma correção para fazer.
Vamos criar a ramificação de correção onde trabalharemos até que tenhamos completado a correção:

[source,console]
----
$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'fixed the broken email address'
[hotfix 1fb7853] fixed the broken email address
 1 file changed, 2 insertions(+)
----

.Ramificação de correção com base na `master`
image::images/basic-branching-4.png[Ramificação de correção com base na `master`.]

Você pode executar os testes, ter certeza que a correção é aquilo que você quer, e fundi-la de volta na ramificação `master` para implementá-la em produção.
Você faz isso com o comando `git merge`:(((comandos git, merge)))

[source,console]
----
$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+)
----

Você vai perceber a frase ``fast-foward`` naquela fusão.
Isso acontece porque a submissão `C4` para qual a ramificação `hotfix` apontava e que você fundiu estava diretamente à frente da submissão `C2` que você estava trabalhando, o Git simplesmente move o ponteiro para frente.
Para expressar isso de outra forma, quando você tenta fundir uma submissão com outra submissão, que pode ser encontrada pelo próximo histórico de submissões, o Git simplifica as coisas ao mover o ponteiro para frente, porque não há divergência de trabalho para ser fundida em conjunto - isso é chamado de ``fast-forward``.

Sua mudança está agora em na imagem de submissão que a ramificação `master` está apontando, e você pode implementar a correção.

.`master` é `fast-forwarded` para `hotfix`.
image::images/basic-branching-5.png[`master` é `fast-forwarded` para `hotfix`.]

Depois que sua super-importante correção foi implementada, você está pronto para alternar de volta para o trabalho que você estava fazendo antes de ser interrompido.
Contudo, primeiro você vai deletar a ramificação `hotfix`, porque você não precisa mais dela - a ramificação `master` aponta para o mesmo lugar.
Você pode deletá-la com a opção `-d` no `git branch`:

[source,console]
----
$ git branch -d hotfix
Deleted branch hotfix (3a0874c).
----

Agora você pode alternar de volta para sua ramificação de trabalho-em-progresso no problema #53 e continuar a trabalhar nele.

[source,console]
----
$ git checkout iss53
Switched to branch "iss53"
$ vim index.html
$ git commit -a -m 'finished the new footer [issue 53]'
[iss53 ad82d7a] finished the new footer [issue 53]
1 file changed, 1 insertion(+)
----

.Trabalho continua no `iss53`
image::images/basic-branching-6.png[Trabalho continua no `iss53`.]

Vale notar aqui que o trabalho que você fez na ramificação `hotfix` não está contido nos arquivos de sua ramificação `iss53`.
Caso você precisa puxá-los, você pode fundir sua ramificação `master` em sua ramificação `iss53` executando `git merge master`, ou você pode esperar para integrar essas mudanças até que decida puxar a ramificação `iss53` de volta para `master`.

[[_basic_merging]]
==== O Básico sobre Fusão

(((ramificação, fundir)))(((fundir)))
Suponha que você decidiu que seu trabalho com o problema #53 está completo e pronto para ser fundido na ramificação `master`.
Para fazer isso, você vai fundir sua ramificação `iss53` na `master`, de forma bem parecida como você fez com a ramificação `hotfix` anteriormente.
Tudo que você precisa fazer é selecionar a ramificação para a qual você quer fundir e então executar o comando `git merge`:

[source,console]
----
$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
----

Isso parece um pouco diferente do que fezemos com a fusão do `hotfix` anteriormente.
Neste caso, sua história de desenvolvimento divergiu de um ponto mais antigo. Porque sua submissão na ramificação que você está não é um antecessor direto da ramificação que você está fundindo, o Git precisa fazer algum trabalho.
Neste caso, o Git faz uma simples fusão chamada de `three-way`, usando duas imagens que apontam para a ramificação estranha e depois para a antecessora das duas.

.As três imagens usadas em uma típica fusão
image::images/basic-merging-1.png[As três imagens usadas em uma típica fusão.]

Em vez de apenas mover o ponteiro da ramificação para frente, o Git cria uma nova imagem que resulta desta fusão `three-way` e automaticamente cria uma nova submissão que aponta para ela.
Isso é referenciado como uma submissão de fusão, e é especial no sentido de que ela tem mais de um pai.

.Uma submissão de fusão
image::images/basic-merging-2.png[Uma submissão de fusão.]

Vale a pena apontar que o Git determina o melhor antecessor para usar em uma base de fusão; isso é diferente do que outras ferramentas antigas como CVS ou Subversion (antes da versão 1.5), onde o desenvolvedor no momento de fazer sua fusão precisa descobrir a melhor base de fusão.
Isso faz o processo de fusão muito mais fácil no Git do que em outros sistemas.

Agora que seu trabalho está fundido, você não mais necessidade da ramificação `iss53`.
Você pode fechar o chamado em seu sistema de rastreamento de chamados, e dleetar a ramificação:

[source,console]
----
$ git branch -d iss53
----

[[_basic_merge_conflicts]]
==== O Básico sobre Conflitos de Fusão

(((fusão, conflitos)))
Ocasionalmente, esse processo não vai ser tranquilo.
Caso você altere a mesma parte do mesmo arquivo nas duas ramificações que voc~e está querendo fundir, o Git não vai estar apto a fundi-los claramente.
Caso seu ajuste para o problema #53 modificasse a mesma parte do arquivo que a `hotfix`, você receberia um conflito de fusão que se pareceria com algo assim:

[source,console]
----
$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.
----


O Git não criou automaticamente uma nova submissão de fusão.
Ele pasou o processo enquanto você resolve o conflito.
Caso voc~e queira ver quais arquivos estão impedindo a fusão em qualquer ponto após o conflito, você pode executar `git status`:

[source,console]
----
$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

    both modified:      index.html

no changes added to commit (use "git add" and/or "git commit -a")
----

Qualquer coisa que tenha conflitos de fusão e não possa ser resolvido é listado como `unmerged` (algo como impedido de fusão).
O Git possui um resolvedor de conflitoso padrão para arquivos que possuem conflitos, com ele você pode abrir os conflitos e resolvê-los.
Seu arquivo contém uma seção que parece com algo do tipo:

[source,html]
----
<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
 please contact us at support@github.com
</div>
>>>>>>> iss53:index.html
----

Isso significa que a versão no `HEAD` (sua ramificação `master`, porque isso foi o que você selecionou quando executou o comando de fusão) está na parte do topo do bloco (tudo sobre o `======`), enquanto a versão em sua ramificação `iss53` parece com qualquer coisa na parte de baixo.
Para resolver o conflito, você precisa escolher um lado ou outro para fundir com o conteúdo que permanecerá.
Para isso, você pode resolver este conflito ao sobrescrever o bloco todo com isso:

[source,html]
----
<div id="footer">
please contact us at email.support@github.com
</div>
----

Essa resolução tem um pouco de cada seção, e os `<<<<<<<<`, `========`, `>>>>>>>>`, além das lihas foram completamente removidas.
Após você resolver cada uma dessas seções em cada arquivo conflitado, execute `git add` em cada arquivo para marcá-lo como corrigido.
Preparar o arquivo o marca como resolvido no Git.

Se você quer usar uma ferramente gráfica para resolver esses problemas, você pode executar o `git mergetool`, o qual executa uma ferramenta visual apropriada para fusão e leva você através dos conflitos: (((comandos git, mergetool)))

[source,console]
----
$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
Merging:
index.html

Normal merge conflict for 'index.html':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (opendiff):
----

Caso voc~e queira usar uma ferramenta de fusão diferente da padrão (o Git escolhe `opendiff` neste caso porque foi executado pelo Mac), você pode ver todas as ferramentas suportadas listadas no topo após ``one of following tools:``.
Só escreva o nome da ferramente que você gostaria de usar.

[NOTE]
====
Caso você precisa de ferramentas mais avançadas para resolver conflitos de fusão mais complicados, nós cobriremos mais na seção <<_advanced_mergin,Fusão Avançada>>
====

Depois de sair da ferramenta de fusão, o Git pergunta se a fusão ocorreu corretamente. 
Caso você você diga sim, ele prepara o arquivo e o marca como resolvido.
Você pode executar o `git status` novamente para verificar que todos os conflitos foram resolvidos:

[source,console]
----
$ git status
On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

    modified:   index.html
----

Se estiver tudo certo, e você confirmar que tudo que tinha conflito agora está preparado, você pode digitar `git commit` para finalizar a submissão de fusão.
A mensagem de submissão por padrão parece com isto:

[source,console]
----
Merge branch 'iss53'

Conflicts:
    index.html
#
# It looks like you may be committing a merge.
# If this is not correct, please remove the file
#	.git/MERGE_HEAD
# and try again.


# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# All conflicts fixed but you are still merging.
#
# Changes to be committed:
#	modified:   index.html
#
----

Se você acredita que será útil para os outros ver esta fusão no futuro, você pode modificar esta mensagem de submissão, incluindo detalhes sobre como você resolveu a fusão e explicar o porquê as mudanças foram feitas, caso elas não sejam obvias. 