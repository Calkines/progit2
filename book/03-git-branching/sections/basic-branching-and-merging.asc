=== O básico sobre Ramificação e Fusão

Vamos ver um simples exemplo de ramificação e fusão com um fluxo de trabalho que você pode usar no mundo real.
Você seguirá as seguintes etapas:

. Fazer um trabalho num site.
. Criar uma ramificação para uma nova história que você está trabalhando.
. Fazer algum trabalho nesta ramificação.

Nesta etapa, você vai receber uma ligação, dizendo que outro problema é critico e você precisa resolvê-lo.
Você fará o seguinte:

. Vai alternar para sua ramificação de produção.
. Criar uma ramificação para adicionar a correção.
. Depois de testá-la, fará a fusão da correção na ramificação, e enviará para produção.
. Voltará para sua história original e continuará trabalhando.

[[_basic_branching]]
==== O básico sobre Ramificação

(((branches, fluxo de trabalho básico)))
Primeiro, vamos dizer que você esteja trabalhando em um projeto que já tenha algumas submissões.

.Um simples histórico de submissões
image::images/basic-branching-1.png[Um simples histórico de submissões.]

Você decidiu que vai trabalhar no problema #53, disponível em qualquer sistema de rastreamento de problemas que sua empresa utilize.
Para criar um ramificação e alternar para ela ao mesmo tempo, você pode executar o comando `git checkout` com a opção `-b`:

[source,console]
----
$ git checkout -b iss53
Switched to a new branch "iss53"
----

Isso é um atalho para:

[source,console]
----
$ git branch iss53
$ git checkout iss53
----

.Criar um novo ponto de ramificação
image::images/basic-branching-2.png[Criar um novo ponto de ramificação.]

Você trabalha no seu website e faz algumas submissões.
Fazer isso move a ramificação para frente, porque você está com ela selecionada (isto é, seu `HEAD` está apontando para ela):

[source,console]
----
$ vim index.html
$ git commit -a -m 'added a new footer [issue 53]'
----

.A ramificação `iss53` foi movida para frente junto com seu trabalho
image::images/basic-branching-3.png[A ramificação `iss53` foi movida para frente junto com seu trabalho.]

Agora você recebe a ligação dizendo há um problema com o website, e você precisa resolvê-lo imediatamente.
Com o Git, você não precisa implementar sua correção do `iss53` junto com as mudanças realizadas, e você não tem que realizar muito esforço para reverter essas mudanças antes que você possa trabalhar aplicando as correções para aquilo que está em produção.
Tudo que você precisa fazer é alternar de volta para a ramificação `master`.

Contudo, antes de fazer isso, perceba que se seu diretório de trabalho, ou área de preparo, possui mudanças não submetidasque conflitam com a ramificação que você está selecionando, o Git não vai permitir que você alterne.
É melhor ter um estado de trabalho limpo quando for selecionar outra ramificação.
Existem maneiras de contornar isso (nomeadamente, `stashing` ou `commit amending`), as quais vamos cobrir mais tarde em <<git_stashing,Acumular no Git>>.

No momento, vamos assumir que você submeteu todas as mudanças, assim você pode alternar de volta para a ramificação `master`:

[source,console]
----
$ git checkout master
Switched to branch 'master'
----

Neste ponto, seu diretório de trabalho está exatamente da mesma forma como era antes de você iniciar o trabalho com o problema #53, e você pode se concentrar na sua correção.
Isso é um ponto importante para lembrar: quando você alterna ramificações, o Git reseta seu diretório de trabalho para parecer como era na última vez que você submeteu algo para nele.

Proximo, você tem uma correção para fazer.
Vamos criar a ramificação de correção onde trabalharemos até que tenhamos completado a correção:

[source,console]
----
$ git checkout -b hotfix
Switched to a new branch 'hotfix'
$ vim index.html
$ git commit -a -m 'fixed the broken email address'
[hotfix 1fb7853] fixed the broken email address
 1 file changed, 2 insertions(+)
----

.Ramificação de correção com base na `master`
image::images/basic-branching-4.png[Ramificação de correção com base na `master`.]

Você pode executar os testes, ter certeza que a correção é aquilo que você quer, e fundi-la de volta na ramificação `master` para implementá-la em produção.
Você faz isso com o comando `git merge`:(((comandos git, merge)))

[source,console]
----
$ git checkout master
$ git merge hotfix
Updating f42c576..3a0874c
Fast-forward
 index.html | 2 ++
 1 file changed, 2 insertions(+)
----

Você vai perceber a frase ``fast-foward`` naquela fusão.
Isso acontece porque a submissão `C4` para qual a ramificação `hotfix` apontava e que você fundiu estava diretamente à frente da submissão `C2` que você estava trabalhando, o Git simplesmente move o ponteiro para frente.
Para expressar isso de outra forma, quando você tenta fundir uma submissão com outra submissão, que pode ser encontrada pelo próximo histórico de submissões, o Git simplifica as coisas ao mover o ponteiro para frente, porque não há divergência de trabalho para ser fundida em conjunto - isso é chamado de ``fast-forward``.

Sua mudança está agora em na imagem de submissão que a ramificação `master` está apontando, e você pode implementar a correção.

.`master` é `fast-forwarded` para `hotfix`.
image::images/basic-branching-5.png[`master` é `fast-forwarded` para `hotfix`.]

After your super-important fix is deployed, you're ready to switch back to the work you were doing before you were interrupted.
However, first you'll delete the `hotfix` branch, because you no longer need it – the `master` branch points at the same place.
You can delete it with the `-d` option to `git branch`:

[source,console]
----
$ git branch -d hotfix
Deleted branch hotfix (3a0874c).
----

Now you can switch back to your work-in-progress branch on issue #53 and continue working on it.

[source,console]
----
$ git checkout iss53
Switched to branch "iss53"
$ vim index.html
$ git commit -a -m 'finished the new footer [issue 53]'
[iss53 ad82d7a] finished the new footer [issue 53]
1 file changed, 1 insertion(+)
----

.Work continues on `iss53`
image::images/basic-branching-6.png[Work continues on `iss53`.]

It's worth noting here that the work you did in your `hotfix` branch is not contained in the files in your `iss53` branch.
If you need to pull it in, you can merge your `master` branch into your `iss53` branch by running `git merge master`, or you can wait to integrate those changes until you decide to pull the `iss53` branch back into `master` later.

[[_basic_merging]]
==== Basic Merging

(((branches, merging)))(((merging)))
Suppose you've decided that your issue #53 work is complete and ready to be merged into your `master` branch.
In order to do that, you'll merge your `iss53` branch into `master`, much like you merged your `hotfix` branch earlier.
All you have to do is check out the branch you wish to merge into and then run the `git merge` command:

[source,console]
----
$ git checkout master
Switched to branch 'master'
$ git merge iss53
Merge made by the 'recursive' strategy.
index.html |    1 +
1 file changed, 1 insertion(+)
----

This looks a bit different than the `hotfix` merge you did earlier.
In this case, your development history has diverged from some older point.
Because the commit on the branch you're on isn't a direct ancestor of the branch you're merging in, Git has to do some work.
In this case, Git does a simple three-way merge, using the two snapshots pointed to by the branch tips and the common ancestor of the two.

.Three snapshots used in a typical merge
image::images/basic-merging-1.png[Three snapshots used in a typical merge.]

Instead of just moving the branch pointer forward, Git creates a new snapshot that results from this three-way merge and automatically creates a new commit that points to it.
This is referred to as a merge commit, and is special in that it has more than one parent.

.A merge commit
image::images/basic-merging-2.png[A merge commit.]

It's worth pointing out that Git determines the best common ancestor to use for its merge base; this is different than older tools like CVS or Subversion (before version 1.5), where the developer doing the merge had to figure out the best merge base for themselves.
This makes merging a heck of a lot easier in Git than in these other systems.

Now that your work is merged in, you have no further need for the `iss53` branch.
You can close the ticket in your ticket-tracking system, and delete the branch:

[source,console]
----
$ git branch -d iss53
----

[[_basic_merge_conflicts]]
==== Basic Merge Conflicts

(((merging, conflicts)))
Occasionally, this process doesn't go smoothly.
If you changed the same part of the same file differently in the two branches you're merging together, Git won't be able to merge them cleanly.
If your fix for issue #53 modified the same part of a file as the `hotfix`, you'll get a merge conflict that looks something like this:

[source,console]
----
$ git merge iss53
Auto-merging index.html
CONFLICT (content): Merge conflict in index.html
Automatic merge failed; fix conflicts and then commit the result.
----

Git hasn't automatically created a new merge commit.
It has paused the process while you resolve the conflict.
If you want to see which files are unmerged at any point after a merge conflict, you can run `git status`:

[source,console]
----
$ git status
On branch master
You have unmerged paths.
  (fix conflicts and run "git commit")

Unmerged paths:
  (use "git add <file>..." to mark resolution)

    both modified:      index.html

no changes added to commit (use "git add" and/or "git commit -a")
----

Anything that has merge conflicts and hasn't been resolved is listed as unmerged.
Git adds standard conflict-resolution markers to the files that have conflicts, so you can open them manually and resolve those conflicts.
Your file contains a section that looks something like this:

[source,html]
----
<<<<<<< HEAD:index.html
<div id="footer">contact : email.support@github.com</div>
=======
<div id="footer">
 please contact us at support@github.com
</div>
>>>>>>> iss53:index.html
----

This means the version in `HEAD` (your `master` branch, because that was what you had checked out when you ran your merge command) is the top part of that block (everything above the `=======`), while the version in your `iss53` branch looks like everything in the bottom part.
In order to resolve the conflict, you have to either choose one side or the other or merge the contents yourself.
For instance, you might resolve this conflict by replacing the entire block with this:

[source,html]
----
<div id="footer">
please contact us at email.support@github.com
</div>
----

This resolution has a little of each section, and the `<<<<<<<`, `=======`, and `>>>>>>>` lines have been completely removed.
After you've resolved each of these sections in each conflicted file, run `git add` on each file to mark it as resolved.
Staging the file marks it as resolved in Git.

If you want to use a graphical tool to resolve these issues, you can run `git mergetool`, which fires up an appropriate visual merge tool and walks you through the conflicts:(((git commands, mergetool)))

[source,console]
----
$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc3 codecompare vimdiff emerge
Merging:
index.html

Normal merge conflict for 'index.html':
  {local}: modified file
  {remote}: modified file
Hit return to start merge resolution tool (opendiff):
----

If you want to use a merge tool other than the default (Git chose `opendiff` in this case because the command was run on a Mac), you can see all the supported tools listed at the top after ``one of the following tools.''
Just type the name of the tool you'd rather use.

[NOTE]
====
If you need more advanced tools for resolving tricky merge conflicts, we cover more on merging in <<_advanced_merging>>.
====

After you exit the merge tool, Git asks you if the merge was successful.
If you tell the script that it was, it stages the file to mark it as resolved for you.
You can run `git status` again to verify that all conflicts have been resolved:

[source,console]
----
$ git status
On branch master
All conflicts fixed but you are still merging.
  (use "git commit" to conclude merge)

Changes to be committed:

    modified:   index.html
----

If you're happy with that, and you verify that everything that had conflicts has been staged, you can type `git commit` to finalize the merge commit.
The commit message by default looks something like this:

[source,console]
----
Merge branch 'iss53'

Conflicts:
    index.html
#
# It looks like you may be committing a merge.
# If this is not correct, please remove the file
#	.git/MERGE_HEAD
# and try again.


# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# All conflicts fixed but you are still merging.
#
# Changes to be committed:
#	modified:   index.html
#
----

If you think it would be helpful to others looking at this merge in the future, you can modify this commit message with details about how you resolved the merge and explain why you did the changes you made if these are not obvious.
