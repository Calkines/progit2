=== Fluxos de Trabalho com Ramificações

Agora que você sabe o básico sobre ramificação e fusão, o que você poderia ou deveria fazer com esse conhecimento?
Nesta seção, vamos cobrir alguns fluxos de trabalho que essa forma leve de fazer ramificações nos proporciona, assim você pode decidir se você gostaria de incorporá-los em seu próprio ciclo de desenvolvimento.

==== Ramificações de Longa Duração

(((ramificações, longa-duração)))
Porque o Git usa aquela forma simples de fusão (three-way), fundir de uma ramificação para outra múltiplas vezes por um período longo é algo geralmente fácil de se fazer.
Isso significa que você pode ter diversas ramificações que estão sempre abertas e você as usa em diferentes estapas do seu ciclo de desenvolvimento; você pode fundi-las regularmente com outras ramificações.

Muitos desenvolvedores Git tem um fluxo de trabalho que engloba essa abordagem, como ter apenas o código que é inteiramente estável em sua ramificação `master` - possívelmente apenas código que está sendo ou será lançado.
Eles possuem uma ramificação paralela chamada `desenvolvimento` ou `próxima` nas quais eles trabalham ou usam para testes estáveis - essas não são necessariamente sempre estáveis, mas sempre que passam para um estado estável, elas podem ser fundidas na `master`.
Isso é usado para receber ramificações por assunto (ramificação de vida curta, como sua ramificação `iss53`) quando elas estão prontas, uma vez que isso aconteça podemos ter mais segurança que elas passaram por todos os testes e não introduziram bugs.

Na realidade, nós estamos falando de ponteiros movendo entre as submissões que você está fazendo.
As ramificações estáveis estão mais abaixo na linha de seu histórico de submissões, enquanto as ramificações não testadas estão mais acima no histórico.

.Uma visualização linear da estabilidade progressida da ramificação
image::images/lr-branches-1.png[Uma visualização linear da estabilidade progressida da ramificação.]

É geralmente fácil de imaginar sobre elas como silos de trabalho, onde um conjunto de submissões é graduada para um silo mais estável quando elas estão totalmente testadas.

[[lrbranch_b]]
.Uma visualização de ``silo``da estabilidade progressida da ramificação
image::images/lr-branches-2.png[Uma visualização de ``silo``da estabilidade progressida da ramificação.]

Você pode manter isso sendo feito por muitos níveis de estabilidade.
Alguns projetos grandes também possuem uma ramificação `proposta` ou `ap` (atualizações propostas), que possuem ramificações integradas que podem não estar prontas para passar para as ramificações `próxima` ou `master`.
A ideia é que suas ramificações estejam em diversos níveis de estabilidade; quando elas alcançam um nível mais estável, elas são fundidas em uma ramificação superior a elas.
Novamente, ter múltiplas ramificações de longa duração não é necessário, mas isso é geralmente útil, especialmente quando voc~e está lidando com projetos muito grandes e complexos.

[[_topic_branch]]
==== Ramificações por Tópicos

(((ramificações, tópico)))
Ramificações por Tópico, contudo, são úteis em projetos de qualquer tamanho.
Uma ramificação por tópicos é uma ramificação de vida curta que você cria e usa para um funcionalidade particular ou algum trabalho relativo.
Isso é algo que você que você desejaria nunca ter feito com um SCV antes, porque isso é geralmente muito custoso para ciar e fundir as ramificações.
Mas no Git isso é algo comum: criar, trabalhar nisso, fundir, e remover ramificações diversas vezes por dia.

Você viu isso na última seção com as ramificações `iss53` e `hotfix` que você criou.
Você fez algumas submissões nelas e as removeu diretamente após realizar a fusão delas em sua ramificação principal.
Essa técnica permite que você alterne entre o contexto de forma rápida e completa - porque seu trabalho está separado em silos, nos quais todas as mudanças desta ramificação tem a ver com o tópico, é mais fácil para ver o que está acontecendo durante a revisão do código e coisas assim.
Você pode manter as mudanças lá por minutos, dias, ou meses, e fazer a fusão delas quando estiverem prontas, independente da ordem na qual elas foram criadas ou estão sendo trabalhadas.

Considere um exemplo de um trabalho que está sendo feito (para `master`), fora da ramificação principal em um problema (`iss91`), um pouco de trabalho é feito nesta ramificação, outra ramificação é criada para tentar uma outra alternativa de sanar o mesmo problema (`iss91v2`), voltamos para a ramificação `master` e trabalhamos lá por um tempo, e então fazemos outra ramificação de lá para algum trabalho que você não tem certeza se é uma boa ideia (ramificação `ideiaIncerta`).
Seu histórico de submissão vai parecer algo como isso:

.Múltiplas ramificações por tópico
image::images/topic-branches-1.png[Múltiplas ramificações por tópico.]

Agora, vamos dizer que você decida que prefere a segunda solução para o problema (`iss91v2`); e mostrou a ramificação `ideiaIncerta` para seus companheiros de trabalho, e eles disseram que você é um gênio.
Você pode abandonar a forma original de ramificação `iss91` (perdendo as submissões `C5` e `C6`) e fundir as outras duas.
Seu histórico ficaria parecido com isto:

.Histórico após fusão de `ideiaIncerta` e `iss91v2`
image::images/topic-branches-2.png[Histórico após fusão de `ideiaIncerta` e `iss91v2`.]

Nós vamos detalhar melhor os detalhes de vários fluxos de trabalho para seu projeto Git em <<_distributed_git,Git Distribuído>>, então antes de decidir qual esquema de ramificações seu projeto usará, certifique-se de ler esse capítulo.

É importante lembrar que tudo que você está fazendo com essas ramificações estão complemtamente offline, em sua máquina.
Quando você está criando ramificações ou fusões, tudo é feito apenas no seu repositório do Git - nenhuma comunicação com servidores está acontecendo.